# Maintainer: Originull Software <packages@originull.org>
_flavor=asahi
pkgname=linux-${_flavor}
pkgver=6.2
_rcrel=3
_asahirel=7
_commit_id=asahi-${pkgver}${_rcrel+-rc}${_rcrel}-${_asahirel}
case $pkgver in
	*.*.*)	_kernver=${pkgver%.*};;
	*.*) _kernver=$pkgver-rc${_rcrel};;
esac
pkgrel=0
pkgdesc="Apple Silicon Asahi development Linux kernel"
url="https://www.kernel.org"
arch="aarch64"
depends="initramfs-generator"
_depends_dev="perl gmp-dev mpc1-dev mpfr-dev elfutils-dev bash flex bison zstd"
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any openssl-dev>3 rust mawk
	lzop diffutils findutils zstd"
options="!strip"
_config=${config:${_flavor}.${CARCH}.config}
install=
source="
https://github.com/AsahiLinux/linux/archive/${_commit_id}.tar.gz
	asahi.aarch64.config
	dracut.conf
	functions.sh
	install-asahi-firmware.sh
	load-asahi-firmware.sh
	module-setup.sh"

subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
_flavors=
for _i in $source; do
	case $_i in
	*.$CARCH.config)
		_f=${_i%.$CARCH.config}
		_flavors="$_flavors ${_f}"
		if [ "linux-$_f" != "$pkgname" ]; then
			subpackages="$subpackages linux-${_f}::$CBUILD_ARCH linux-${_f}-dev:_dev:$CBUILD_ARCH"
		fi
		;;
	esac
done

#if [ "${pkgver%.0}" = "$pkgver" ]; then
#	source="$source
#	https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz"
#fi
arch="all !armhf !riscv64"
license="GPL-2.0"

# secfixes:
#   5.10.4-r0:
#     - CVE-2020-29568
#     - CVE-2020-29569

prepare() {
	local _patch_failed=
	cd "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel
	#if [ "$_kernver" != "$pkgver" ]; then
	#	msg "Applying patch-$pkgver.xz"
	#	unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N
	#fi

	# first apply patches in specified order
	for i in $source; do
		case $i in
		*.patch)
			msg "Applying $i..."
			if ! patch -s -p1 -N -i "$srcdir"/$i; then
				echo $i >>failed
				_patch_failed=1
			fi
			;;
		esac
	done

	if ! [ -z "$_patch_failed" ]; then
		error "The following patches failed:"
		cat failed
		return 1
	fi

	# remove localversion from patch if any
	rm -f localversion*
}

_kernelarch() {
	local arch="$1"
	case "$arch" in
		aarch64*) arch="arm64" ;;
		arm*) arch="arm" ;;
		mips*) arch="mips" ;;
		ppc*) arch="powerpc" ;;
		s390*) arch="s390" ;;
	esac
	echo "$arch"
}

_prepareconfig() {
	local _flavor="$1"
	local _arch="$2"
	local _config=$_flavor.$_arch.config
	local _builddir="$srcdir"/build-$_flavor.$_arch
	mkdir -p "$_builddir"
	echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-originull \
		|| return 1

	cp "$srcdir"/$_config "$_builddir"/.config
	msg "Configuring $_flavor kernel ($_arch)"
	make -C "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel \
		O="$_builddir" \
		ARCH="$(_kernelarch $_arch)" \
		olddefconfig
}

listconfigs() {
	for i in $source; do
		case "$i" in
			*.config) echo $i;;
		esac
	done
}

prepareconfigs() {
	for _config in $(listconfigs); do
		local _flavor=${_config%%.*}
		local _arch=${_config%.config}
		_arch=${_arch#*.}
		local _builddir="$srcdir"/build-$_flavor.$_arch
		_prepareconfig "$_flavor" "$_arch"
	done
}

# this is supposed to be run before version is bumped so we can compare
# what new kernel config knobs are introduced
prepareupdate() {
	clean && fetch && unpack && prepare && deps
	prepareconfigs
	rm -r "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel
}

updateconfigs() {
	if ! [ -d "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel ]; then
		deps && fetch && unpack && prepare
	fi
	for _config in $(listconfigs); do
		local _flavor=${_config%%.*}
		local _arch=${_config%.config}
		_arch=${_arch#*.}
		local _builddir="$srcdir"/build-$_flavor.$_arch
		mkdir -p "$_builddir"
		echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-originull
		local actions="listnewconfig oldconfig"
		if ! [ -f "$_builddir"/.config ]; then
			cp "$srcdir"/$_config "$_builddir"/.config
			actions="olddefconfig"
			env | grep ^CONFIG_ >> "$_builddir"/.config || true
		fi
		make -j1 -C "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel \
			O="$_builddir" \
			ARCH="$(_kernelarch $_arch)" \
			$actions savedefconfig

		cp "$_builddir"/defconfig "$startdir"/$_config
	done
}

build() {
	unset LDFLAGS
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	for i in $_flavors; do
		_prepareconfig "$i" "$CARCH"
	done
	for i in $_flavors; do
		msg "Building $i kernel"
		cd "$srcdir"/build-$i.$CARCH
		make ARCH="$(_kernelarch $CARCH)" \
			CC="${CC:-gcc}" \
			AWK="${AWK:-mawk}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Originull"
	done
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	local _abi_release=${pkgver}-${pkgrel}-asahi
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	cd "$srcdir"/build-$_buildflavor.$CARCH
	# modules_install seems to regenerate a defect Modules.symvers on s390x. Work
	# around it by backing it up and restore it after modules_install
	cp Module.symvers Module.symvers.backup

	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

	local _install
	case "$CARCH" in
		arm*|aarch64) _install="zinstall dtbs_install";;
		*) _install=install;;
	esac

	make -j1 modules_install $_install \
		ARCH="arm64" \
		INSTALL_MOD_PATH="$_outdir" \
		INSTALL_PATH="$_outdir"/boot \
		INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

	cp Module.symvers.backup Module.symvers

	rm -f "$_outdir"/lib/modules/${_abi_release}/build \
		"$_outdir"/lib/modules/${_abi_release}/source
	rm -rf "$_outdir"/lib/firmware

	install -D -m644 include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release
}

# main flavor installs in $pkgdir
package() {
	depends="$depends linux-firmware-any"

	_package asahi "$pkgdir"

	# Install Asahi Linux dracut files

	mkdir -p "$pkgdir"/etc/dracut.conf.d/
	install -m644 "$srcdir"/dracut.conf "$pkgdir"/etc/dracut.conf.d/10-asahi.conf

	mkdir -p "$pkgdir"/lib/dracut/modules.d/99asahi-firmware/
	install -m755 "$srcdir"/install-asahi-firmware.sh "$pkgdir"/lib/dracut/modules.d/99asahi-firmware/
	install -m755 "$srcdir"/load-asahi-firmware.sh "$pkgdir"/lib/dracut/modules.d/99asahi-firmware/
	install -m755 "$srcdir"/module-setup.sh "$pkgdir"/lib/dracut/modules.d/99asahi-firmware/
	
	mkdir -p "$pkgdir"/usr/share/asahi-scripts/
	install -m755 "$srcdir"/functions.sh "$pkgdir"/usr/share/asahi-scripts/functions.sh
}

_dev() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _abi_release=${pkgver}-${pkgrel}-asahi
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	local _builddir="$srcdir"/build-$_flavor.$CARCH
	cp -a "$_builddir"/.config "$_builddir"/localversion-originull \
		"$dir"/

	make -j1 -C "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel \
		O="$dir" \
		ARCH="$(_kernelarch $CARCH)" \
		prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the soruces
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$srcdir"/linux-asahi-$pkgver-rc$_rcrel-$_asahirel
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$dir"

	install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
		"$dir"/Module.symvers

	mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
	ln -sf /usr/src/linux-headers-${_abi_release} \
		"$subpkgdir"/lib/modules/${_abi_release}/build
}

sha512sums="
1119d22a7fe6bafeb1c9c741bf1c625c51364f0eff77f17797b1ed70af8aca9eda4f77cfa72fa5b8bddd6c59964a93757f531b513f1ee3bdd55c4e72c1865c5e  asahi-6.2-rc3-7.tar.gz
5e3e5ef3d70a17518d9f5a204568b746dbcfbeac2a6b80d167d56886a34879100572f5b9850270d9562e6ece58b1e1dac04e88f751d285f30aaac86d6eaecb5a  asahi.aarch64.config
f6a7aacf71782410e992c2900b416f62d2c26c02f98acec875cb68d973ab1246c5a04029e0d2ab397f5de66b010aced32731c1bda08e0a47655e507bafad90aa  dracut.conf
2fd3cabac16a0a7ddc424efd8944fcf347fb4942404f2b1db77eb73acd87dd53edcce2c6fe6b2017298996a5caf0f90e8f879da5b4dd5b7e88a5bcadc041cd7d  functions.sh
0b6332b81e161b570fee33647e8c9c822d6c09e526021454a7f6eb46a7589ab4fcb7b9287f10c8d6fb1d922e3fe72698ebb214924271a1c2dcb27c9b363f47ca  install-asahi-firmware.sh
d3dd4303e067c8fec4482fca20b368584163f11a8fe70d4aa67de30f6054814b9b2309ddf2fc1c68ac37630a69a4406b0681d089b127f6b312ad9e567201cf79  load-asahi-firmware.sh
e6a978be50f568fe450366d4c948f15a7240a53c36f2f536ba9448cc3fe268b689f0ea5641bf05098eced510583218fed8de874c9fb09fc5065c433cf7a459d1  module-setup.sh
"
