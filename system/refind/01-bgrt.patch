diff -Naur refind-0.13.3.1-orig/refind/launch_efi.c refind-0.13.3.1/refind/launch_efi.c
--- refind-0.13.3.1-orig/refind/launch_efi.c	2022-04-10 22:28:43.000000000 +0000
+++ refind-0.13.3.1/refind/launch_efi.c	2022-11-14 03:17:46.362027441 +0000
@@ -374,7 +374,7 @@
     BeginExternalScreen(Entry->UseGraphicsMode, L"Booting OS");
     StoreLoaderName(SelectionName);
     StartEFIImage(Entry->Volume, Entry->LoaderPath, Entry->LoadOptions,
-                  LoaderPath, Entry->OSType, !Entry->UseGraphicsMode, FALSE);
+                  LoaderPath, Entry->OSType, !Entry->UseGraphicsMode && GlobalConfig.Timeout != -1, FALSE);
     MyFreePool(LoaderPath);
 } // VOID StartLoader()
 
diff -Naur refind-0.13.3.1-orig/refind/main.c refind-0.13.3.1/refind/main.c
--- refind-0.13.3.1-orig/refind/main.c	2022-04-10 22:36:35.000000000 +0000
+++ refind-0.13.3.1/refind/main.c	2022-11-14 03:18:46.172106923 +0000
@@ -447,6 +447,10 @@
     EFI_STATUS         Status;
     BOOLEAN            MainLoopRunning = TRUE;
     BOOLEAN            MokProtocol;
+    BOOLEAN            Silent = FALSE;
+    CHAR16             KeyAsString[2];
+    INTN               ShortcutEntry;
+    EFI_INPUT_KEY      key;
     REFIT_MENU_ENTRY   *ChosenEntry;
     UINTN              MenuExit = MENU_EXIT_ENTER, i;
     CHAR16             *SelectionName = NULL;
@@ -485,7 +489,31 @@
     if (GlobalConfig.SpoofOSXVersion && GlobalConfig.SpoofOSXVersion[0] != L'\0')
         SetAppleOSInfo();
 
-    InitScreen();
+    SetVolumeIcons();
+    ScanForBootloaders(FALSE);
+    ScanForTools();
+
+    if (GlobalConfig.Timeout == -1) {
+        Status = refit_call2_wrapper(ST->ConIn->ReadKeyStroke, ST->ConIn, &key);
+        //Silent = Status == EFI_NOT_READY;
+        if (Status == EFI_NOT_READY) {
+            Silent = TRUE;
+        } else {
+            KeyAsString[0] = key.UnicodeChar;
+            KeyAsString[1] = 0;
+            ShortcutEntry = FindMenuShortcutEntry(&MainMenu, KeyAsString);
+            if (ShortcutEntry >= 0) {
+                ChosenEntry = MainMenu.Entries[ShortcutEntry];
+                SelectionName = StrDuplicate(ChosenEntry->Title);
+                Silent = TRUE;
+            } else {
+                GlobalConfig.Timeout = 0;
+            }
+        }
+    }
+
+    if (!Silent)
+        InitScreen();
     WarnIfLegacyProblems();
     MainMenu.TimeoutSeconds = GlobalConfig.Timeout;
 
@@ -494,10 +522,8 @@
     refit_call4_wrapper(BS->SetWatchdogTimer, 0x0000, 0x0000, 0x0000, NULL);
 
     // further bootstrap (now with config available)
-    SetupScreen();
-    SetVolumeIcons();
-    ScanForBootloaders(FALSE);
-    ScanForTools();
+    if (!Silent)
+        SetupScreen();
 
     // SetupScreen() clears the screen; but ScanForBootloaders() may display a
     // message that must be deleted, so do so
@@ -515,14 +541,17 @@
        BltClearScreen(TRUE);
     } // if
 
-    if (GlobalConfig.DefaultSelection)
+    if (GlobalConfig.DefaultSelection && !SelectionName)
        SelectionName = StrDuplicate(GlobalConfig.DefaultSelection);
     if (GlobalConfig.ShutdownAfterTimeout)
         MainMenu.TimeoutText = L"Shutdown";
 
     LOG(1, LOG_LINE_SEPARATOR, L"Entering main loop");
     while (MainLoopRunning) {
-        MenuExit = RunMainMenu(&MainMenu, &SelectionName, &ChosenEntry);
+        if (!Silent)
+            MenuExit = RunMainMenu(&MainMenu, &SelectionName, &ChosenEntry);
+        // Give it a chance to RunMainMenu next loop if it fails
+        Silent = FALSE;
 
         // The Escape key triggers a re-scan operation....
         if (MenuExit == MENU_EXIT_ESCAPE) {
diff -Naur refind-0.13.3.1-orig/refind/main.c.orig refind-0.13.3.1/refind/main.c.orig
--- refind-0.13.3.1-orig/refind/main.c.orig	2021-02-21 21:40:58.000000000 +0000
+++ refind-0.13.3.1/refind/main.c.orig	2022-11-14 03:17:17.036697679 +0000
@@ -34,7 +34,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 /*
- * Modifications copyright (c) 2012-2017 Roderick W. Smith
+ * Modifications copyright (c) 2012-2021 Roderick W. Smith
  *
  * Modifications distributed under the terms of the GNU General Public
  * License (GPL) version 3 (GPLv3), or (at your option) any later version.
@@ -58,119 +58,50 @@
 #include "global.h"
 #include "config.h"
 #include "screen.h"
-#include "legacy.h"
+#include "launch_legacy.h"
 #include "lib.h"
 #include "icns.h"
+#include "install.h"
 #include "menu.h"
-#include "pointer.h"
 #include "mok.h"
-#include "gpt.h"
 #include "apple.h"
 #include "mystrings.h"
 #include "security_policy.h"
 #include "driver_support.h"
-#include "../include/Handle.h"
+#include "launch_efi.h"
+#include "scan.h"
+#include "log.h"
 #include "../include/refit_call_wrapper.h"
 #include "../include/version.h"
-#include "../EfiLib/BdsHelper.h"
-#include "../EfiLib/legacy.h"
+#include "../libeg/efiConsoleControl.h"
+#include "../libeg/efiUgaDraw.h"
 
-#ifdef __MAKEWITH_GNUEFI
-#ifndef EFI_SECURITY_VIOLATION
-#define EFI_SECURITY_VIOLATION    EFIERR (26)
-#endif
-#endif
-
-#ifndef EFI_OS_INDICATIONS_BOOT_TO_FW_UI
-#define EFI_OS_INDICATIONS_BOOT_TO_FW_UI 0x0000000000000001ULL
-#endif
-
-#ifdef __MAKEWITH_TIANO
-#define LibLocateHandle gBS->LocateHandleBuffer
+#ifndef __MAKEWITH_GNUEFI
+#define LibLocateProtocol EfiLibLocateProtocol
 #endif
 
 //
-// constants
-
-#define MACOSX_LOADER_DIR      L"System\\Library\\CoreServices"
-#define MACOSX_LOADER_PATH      ( MACOSX_LOADER_DIR L"\\boot.efi" )
-#if defined (EFIX64)
-#define SHELL_NAMES             L"\\EFI\\tools\\shell.efi,\\EFI\\tools\\shellx64.efi,\\shell.efi,\\shellx64.efi"
-#define GPTSYNC_NAMES           L"\\EFI\\tools\\gptsync.efi,\\EFI\\tools\\gptsync_x64.efi"
-#define GDISK_NAMES             L"\\EFI\\tools\\gdisk.efi,\\EFI\\tools\\gdisk_x64.efi"
-#define NETBOOT_NAMES           L"\\EFI\\tools\\ipxe.efi"
-#define MEMTEST_NAMES           L"memtest86.efi,memtest86_x64.efi,memtest86x64.efi,bootx64.efi"
-#define FALLBACK_FULLNAME       L"EFI\\BOOT\\bootx64.efi"
-#define FALLBACK_BASENAME       L"bootx64.efi"
-#define EFI_STUB_ARCH           0x8664
-EFI_GUID gFreedesktopRootGuid = { 0x4f68bce3, 0xe8cd, 0x4db1, { 0x96, 0xe7, 0xfb, 0xca, 0xf9, 0x84, 0xb7, 0x09 }};
-#elif defined (EFI32)
-#define SHELL_NAMES             L"\\EFI\\tools\\shell.efi,\\EFI\\tools\\shellia32.efi,\\shell.efi,\\shellia32.efi"
-#define GPTSYNC_NAMES           L"\\EFI\\tools\\gptsync.efi,\\EFI\\tools\\gptsync_ia32.efi"
-#define GDISK_NAMES             L"\\EFI\\tools\\gdisk.efi,\\EFI\\tools\\gdisk_ia32.efi"
-#define NETBOOT_NAMES           L"\\EFI\\tools\\ipxe.efi"
-#define MEMTEST_NAMES           L"memtest86.efi,memtest86_ia32.efi,memtest86ia32.efi,bootia32.efi"
-#define FALLBACK_FULLNAME       L"EFI\\BOOT\\bootia32.efi"
-#define FALLBACK_BASENAME       L"bootia32.efi"
-#define EFI_STUB_ARCH           0x014c
-EFI_GUID gFreedesktopRootGuid = { 0x44479540, 0xf297, 0x41b2, { 0x9a, 0xf7, 0xd1, 0x31, 0xd5, 0xf0, 0x45, 0x8a }};
-#elif defined (EFIAARCH64)
-#define SHELL_NAMES             L"\\EFI\\tools\\shell.efi,\\EFI\\tools\\shellaa64.efi,\\shell.efi,\\shellaa64.efi"
-#define GPTSYNC_NAMES           L"\\EFI\\tools\\gptsync.efi,\\EFI\\tools\\gptsync_aa64.efi"
-#define GDISK_NAMES             L"\\EFI\\tools\\gdisk.efi,\\EFI\\tools\\gdisk_aa64.efi"
-#define NETBOOT_NAMES           L"\\EFI\\tools\\ipxe.efi"
-#define MEMTEST_NAMES           L"memtest86.efi,memtest86_aa64.efi,memtest86aa64.efi,bootaa64.efi"
-#define FALLBACK_FULLNAME       L"EFI\\BOOT\\bootaa64.efi"
-#define FALLBACK_BASENAME       L"bootaa64.efi"
-#define EFI_STUB_ARCH           0xaa64
-EFI_GUID gFreedesktopRootGuid = { 0xb921b045, 0x1df0, 0x41c3, { 0xaf, 0x44, 0x4c, 0x6f, 0x28, 0x0d, 0x3f, 0xae }};
-#else
-#define SHELL_NAMES             L"\\EFI\\tools\\shell.efi,\\shell.efi"
-#define GPTSYNC_NAMES           L"\\EFI\\tools\\gptsync.efi"
-#define GDISK_NAMES             L"\\EFI\\tools\\gdisk.efi"
-#define NETBOOT_NAMES           L"\\EFI\\tools\\ipxe.efi"
-#define MEMTEST_NAMES           L"memtest86.efi"
-#define DRIVER_DIRS             L"drivers"
-#define FALLBACK_FULLNAME       L"EFI\\BOOT\\boot.efi" /* Not really correct */
-#define FALLBACK_BASENAME       L"boot.efi"            /* Not really correct */
-// Below is GUID for ARM32
-EFI_GUID gFreedesktopRootGuid = { 0x69dad710, 0x2ce4, 0x4e3c, { 0xb1, 0x6c, 0x21, 0xa1, 0xd4, 0x9a, 0xbe, 0xd3 }};
-#endif
-#define FAT_ARCH                0x0ef1fab9 /* ID for Apple "fat" binary */
-
-#define IPXE_DISCOVER_NAME      L"\\efi\\tools\\ipxe_discover.efi"
-#define IPXE_NAME               L"\\efi\\tools\\ipxe.efi"
+// Some built-in menu definitions....
 
-// Patterns that identify Linux kernels. Added to the loader match pattern when the
-// scan_all_linux_kernels option is set in the configuration file. Causes kernels WITHOUT
-// a ".efi" extension to be found when scanning for boot loaders.
-#define LINUX_MATCH_PATTERNS    L"vmlinuz*,bzImage*,kernel*"
-
-// Maximum length of a text string in certain menus
-#define MAX_LINE_LENGTH 65
-
-static REFIT_MENU_ENTRY MenuEntryAbout    = { L"About rEFInd", TAG_ABOUT, 1, 0, 'A', NULL, NULL, NULL };
-static REFIT_MENU_ENTRY MenuEntryReset    = { L"Reboot Computer", TAG_REBOOT, 1, 0, 'R', NULL, NULL, NULL };
-static REFIT_MENU_ENTRY MenuEntryShutdown = { L"Shut Down Computer", TAG_SHUTDOWN, 1, 0, 'U', NULL, NULL, NULL };
 REFIT_MENU_ENTRY MenuEntryReturn   = { L"Return to Main Menu", TAG_RETURN, 1, 0, 0, NULL, NULL, NULL };
-static REFIT_MENU_ENTRY MenuEntryExit     = { L"Exit rEFInd", TAG_EXIT, 1, 0, 0, NULL, NULL, NULL };
-static REFIT_MENU_ENTRY MenuEntryManageHidden = { L"Manage Hidden Tags Menu", TAG_HIDDEN, 1, 0, 0, NULL, NULL, NULL };
-static REFIT_MENU_ENTRY MenuEntryFirmware = { L"Reboot to Computer Setup Utility", TAG_FIRMWARE, 1, 0, 0, NULL, NULL, NULL };
-static REFIT_MENU_ENTRY MenuEntryRotateCsr = { L"Change SIP Policy", TAG_CSR_ROTATE, 1, 0, 0, NULL, NULL, NULL };
 
 REFIT_MENU_SCREEN MainMenu       = { L"Main Menu", NULL, 0, NULL, 0, NULL, 0, L"Automatic boot",
                                      L"Use arrow keys to move cursor; Enter to boot;",
                                      L"Insert, Tab, or F2 for more options; Esc or Backspace to refresh" };
 static REFIT_MENU_SCREEN AboutMenu      = { L"About", NULL, 0, NULL, 0, NULL, 0, NULL, L"Press Enter to return to main menu", L"" };
 
-<<<<<<< HEAD
 REFIT_CONFIG GlobalConfig = { /* TextOnly = */ FALSE,
                               /* ScanAllLinux = */ TRUE,
                               /* DeepLegacyScan = */ FALSE,
                               /* EnableAndLockVMX = */ FALSE,
                               /* FoldLinuxKernels = */ TRUE,
+                              /* EnableMouse = */ FALSE,
                               /* EnableTouch = */ FALSE,
                               /* HiddenTags = */ TRUE,
+                              /* UseNvram = */ TRUE,
+                              /* ShutdownAfterTimeout = */ FALSE,
+                              /* Install = */ FALSE,
+                              /* WriteSystemdVars = */ FALSE,
                               /* RequestedScreenWidth = */ 0,
                               /* RequestedScreenHeight = */ 0,
                               /* BannerBottomEdge = */ 0,
@@ -182,8 +113,13 @@
                               /* LegacyType = */ LEGACY_TYPE_MAC,
                               /* ScanDelay = */ 0,
                               /* ScreensaverTime = */ 0,
-                              /* IconSizes = */ { DEFAULT_BIG_ICON_SIZE / 4, DEFAULT_SMALL_ICON_SIZE, DEFAULT_BIG_ICON_SIZE },
+                              /* MouseSpeed = */ 4,
+                              /* IconSizes = */ { DEFAULT_BIG_ICON_SIZE / 4,
+                                                  DEFAULT_SMALL_ICON_SIZE,
+                                                  DEFAULT_BIG_ICON_SIZE,
+                                                  DEFAULT_MOUSE_SIZE },
                               /* BannerScale = */ BANNER_NOSCALE,
+                              /* LogLevel = */ 0,
                               /* *DiscoveredRoot = */ NULL,
                               /* *SelfDevicePath = */ NULL,
                               /* *BannerFileName = */ NULL,
@@ -197,7 +133,9 @@
                               /* *DontScanDirs = */ NULL,
                               /* *DontScanFiles = */ NULL,
                               /* *DontScanTools = */ NULL,
+                              /* *DontScanFirmware = */ NULL,
                               /* *WindowsRecoveryFiles = */ NULL,
+                              /* *MacOSRecoveryFiles = */ NULL,
                               /* *DriverDirs = */ NULL,
                               /* *IconsDir = */ NULL,
                               /* *ExtraKernelVersionStrings = */ NULL,
@@ -206,50 +144,38 @@
                               /* ShowTools = */ { TAG_SHELL, TAG_MEMTEST, TAG_GDISK, TAG_APPLE_RECOVERY, TAG_WINDOWS_RECOVERY,
                                                   TAG_MOK_TOOL, TAG_ABOUT, TAG_HIDDEN, TAG_SHUTDOWN, TAG_REBOOT, TAG_FIRMWARE,
                                                   TAG_FWUPDATE_TOOL, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
-=======
-REFIT_CONFIG GlobalConfig = { FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, 0, 0, 0, DONT_CHANGE_TEXT_MODE,
-                              20, 0, 0, GRAPHICS_FOR_OSX, LEGACY_TYPE_MAC,
-                              0, 0, { DEFAULT_BIG_ICON_SIZE / 4, DEFAULT_SMALL_ICON_SIZE, DEFAULT_BIG_ICON_SIZE, DEFAULT_MOUSE_SIZE },
-                              BANNER_NOSCALE, 1, NULL, NULL, NULL, NULL, CONFIG_FILE_NAME, NULL, NULL, NULL, NULL,
-                              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
-                              { TAG_SHELL, TAG_MEMTEST, TAG_GDISK, TAG_APPLE_RECOVERY, TAG_WINDOWS_RECOVERY,
-                                TAG_MOK_TOOL, TAG_ABOUT, TAG_SHUTDOWN, TAG_REBOOT, TAG_FIRMWARE, TAG_FWUPDATE_TOOL,
-                                0, 0, 0, 0, 0, 0, 0, 0 }
->>>>>>> d63734581c19715b3dc13ab89c520def8d5c4566
                             };
 
-EFI_GUID GlobalGuid = EFI_GLOBAL_VARIABLE;
-EFI_GUID RefindGuid = REFIND_GUID_VALUE;
-
-GPT_DATA *gPartitions = NULL;
+CHAR16 *gHiddenTools = NULL;
 
-// Structure used to hold boot loader filenames and time stamps in
-// a linked list; used to sort entries within a directory.
-struct LOADER_LIST {
-    CHAR16              *FileName;
-    EFI_TIME            TimeStamp;
-    struct LOADER_LIST  *NextEntry;
-};
+EFI_GUID RefindGuid = REFIND_GUID_VALUE;
 
 //
 // misc functions
 //
 
-static VOID AboutrEFInd(VOID)
+VOID AboutrEFInd(VOID)
 {
     CHAR16     *FirmwareVendor;
+    CHAR16     *TempStr;
     UINT32     CsrStatus;
 
+    LOG(1, LOG_LINE_SEPARATOR, L"Displaying About/Info screen");
     if (AboutMenu.EntryCount == 0) {
         AboutMenu.TitleImage = BuiltinIcon(BUILTIN_ICON_FUNC_ABOUT);
         AddMenuInfoLine(&AboutMenu, PoolPrint(L"rEFInd Version %s", REFIND_VERSION));
         AddMenuInfoLine(&AboutMenu, L"");
         AddMenuInfoLine(&AboutMenu, L"Copyright (c) 2006-2010 Christoph Pfisterer");
-        AddMenuInfoLine(&AboutMenu, L"Copyright (c) 2012-2017 Roderick W. Smith");
+        AddMenuInfoLine(&AboutMenu, L"Copyright (c) 2012-2021 Roderick W. Smith");
         AddMenuInfoLine(&AboutMenu, L"Portions Copyright (c) Intel Corporation and others");
         AddMenuInfoLine(&AboutMenu, L"Distributed under the terms of the GNU GPLv3 license");
         AddMenuInfoLine(&AboutMenu, L"");
         AddMenuInfoLine(&AboutMenu, L"Running on:");
+        FirmwareVendor = StrDuplicate(ST->FirmwareVendor);
+        LimitStringLength(FirmwareVendor, MAX_LINE_LENGTH); // More than ~65 causes empty info page on 800x600 display
+        AddMenuInfoLine(&AboutMenu, PoolPrint(L" Firmware: %s %d.%02d", FirmwareVendor,
+                                              ST->FirmwareRevision >> 16,
+                                              ST->FirmwareRevision & ((1 << 16) - 1)));
         AddMenuInfoLine(&AboutMenu, PoolPrint(L" EFI Revision %d.%02d", ST->Hdr.Revision >> 16, ST->Hdr.Revision & ((1 << 16) - 1)));
 #if defined(EFI32)
         AddMenuInfoLine(&AboutMenu, PoolPrint(L" Platform: x86 (32 bit); Secure Boot %s",
@@ -267,11 +193,9 @@
             RecordgCsrStatus(CsrStatus, FALSE);
             AddMenuInfoLine(&AboutMenu, gCsrStatus);
         }
-        FirmwareVendor = StrDuplicate(ST->FirmwareVendor);
-        LimitStringLength(FirmwareVendor, MAX_LINE_LENGTH); // More than ~65 causes empty info page on 800x600 display
-        AddMenuInfoLine(&AboutMenu, PoolPrint(L" Firmware: %s %d.%02d", FirmwareVendor, ST->FirmwareRevision >> 16,
-                                              ST->FirmwareRevision & ((1 << 16) - 1)));
-        AddMenuInfoLine(&AboutMenu, PoolPrint(L" Screen Output: %s", egScreenDescription()));
+        TempStr = egScreenDescription();
+        AddMenuInfoLine(&AboutMenu, PoolPrint(L" Screen Output: %s", TempStr));
+        MyFreePool(TempStr);
         AddMenuInfoLine(&AboutMenu, L"");
 #if defined(__MAKEWITH_GNUEFI)
         AddMenuInfoLine(&AboutMenu, L"Built with GNU-EFI");
@@ -282,1812 +206,36 @@
         AddMenuInfoLine(&AboutMenu, L"For more information, see the rEFInd Web site:");
         AddMenuInfoLine(&AboutMenu, L"http://www.rodsbooks.com/refind/");
         AddMenuEntry(&AboutMenu, &MenuEntryReturn);
+        MyFreePool(FirmwareVendor);
     }
 
     RunMenu(&AboutMenu, NULL);
 } /* VOID AboutrEFInd() */
 
-static VOID WarnSecureBootError(CHAR16 *Name, BOOLEAN Verbose) {
-    if (Name == NULL)
-        Name = L"the loader";
-
-    refit_call2_wrapper(ST->ConOut->SetAttribute, ST->ConOut, ATTR_ERROR);
-    Print(L"Secure Boot validation failure loading %s!\n", Name);
-    refit_call2_wrapper(ST->ConOut->SetAttribute, ST->ConOut, ATTR_BASIC);
-    if (Verbose && secure_mode()) {
-        Print(L"\nThis computer is configured with Secure Boot active, but\n%s has failed validation.\n", Name);
-        Print(L"\nYou can:\n * Launch another boot loader\n");
-        Print(L" * Disable Secure Boot in your firmware\n");
-        Print(L" * Sign %s with a machine owner key (MOK)\n", Name);
-        Print(L" * Use a MOK utility (often present on the second row) to add a MOK with which\n");
-        Print(L"   %s has already been signed.\n", Name);
-        Print(L" * Use a MOK utility to register %s (\"enroll its hash\") without\n", Name);
-        Print(L"   signing it.\n");
-        Print(L"\nSee http://www.rodsbooks.com/refind/secureboot.html for more information\n");
-        PauseForKey();
-    } // if
-} // VOID WarnSecureBootError()
-
-// Returns TRUE if this file is a valid EFI loader file, and is proper ARCH
-static BOOLEAN IsValidLoader(EFI_FILE *RootDir, CHAR16 *FileName) {
-    BOOLEAN         IsValid = TRUE;
-#if defined (EFIX64) | defined (EFI32) | defined (EFIAARCH64)
-    EFI_STATUS      Status;
-    EFI_FILE_HANDLE FileHandle;
-    CHAR8           Header[512];
-    UINTN           Size = sizeof(Header);
-
-    if ((RootDir == NULL) || (FileName == NULL)) {
-        // Assume valid here, because Macs produce NULL RootDir (& maybe FileName)
-        // when launching from a Firewire drive. This should be handled better, but
-        // fix would have to be in StartEFIImageList() and/or in FindVolumeAndFilename().
-        return TRUE;
-    } // if
-
-    Status = refit_call5_wrapper(RootDir->Open, RootDir, &FileHandle, FileName, EFI_FILE_MODE_READ, 0);
-    if (EFI_ERROR(Status))
-        return FALSE;
-
-    Status = refit_call3_wrapper(FileHandle->Read, FileHandle, &Size, Header);
-    refit_call1_wrapper(FileHandle->Close, FileHandle);
-
-    IsValid = !EFI_ERROR(Status) &&
-              Size == sizeof(Header) &&
-              ((Header[0] == 'M' && Header[1] == 'Z' &&
-               (Size = *(UINT32 *)&Header[0x3c]) < 0x180 &&
-               Header[Size] == 'P' && Header[Size+1] == 'E' &&
-               Header[Size+2] == 0 && Header[Size+3] == 0 &&
-               *(UINT16 *)&Header[Size+4] == EFI_STUB_ARCH) ||
-              (*(UINT32 *)&Header == FAT_ARCH));
-#endif
-    return IsValid;
-} // BOOLEAN IsValidLoader()
-
-// Launch an EFI binary.
-EFI_STATUS StartEFIImageList(IN EFI_DEVICE_PATH **DevicePaths,
-                             IN CHAR16 *LoadOptions, IN UINTN LoaderType,
-                             IN CHAR16 *ImageTitle, IN CHAR8 OSType,
-                             OUT UINTN *ErrorInStep,
-                             IN BOOLEAN Verbose,
-                             IN BOOLEAN IsDriver)
-{
-    EFI_STATUS              Status, ReturnStatus;
-    EFI_HANDLE              ChildImageHandle, ChildImageHandle2;
-    EFI_LOADED_IMAGE        *ChildLoadedImage = NULL;
-    REFIT_VOLUME            *Volume = NULL;
-    UINTN                   DevicePathIndex;
-    CHAR16                  ErrorInfo[256];
-    CHAR16                  *FullLoadOptions = NULL;
-    CHAR16                  *Filename = NULL;
-    CHAR16                  *Temp;
-
-    if (ErrorInStep != NULL)
-        *ErrorInStep = 0;
-
-    // set load options
-    if (LoadOptions != NULL) {
-        FullLoadOptions = StrDuplicate(LoadOptions);
-        if ((LoaderType == TYPE_EFI) && (OSType == 'M')) {
-            MergeStrings(&FullLoadOptions, L" ", 0);
-            // NOTE: That last space is also added by the EFI shell and seems to be significant
-            // when passing options to Apple's boot.efi...
-        } // if
-    } // if (LoadOptions != NULL)
-    if (Verbose)
-    Print(L"Starting %s\nUsing load options '%s'\n", ImageTitle, FullLoadOptions ? FullLoadOptions : L"");
-
-    // load the image into memory
-    ReturnStatus = Status = EFI_NOT_FOUND;  // in case the list is empty
-    for (DevicePathIndex = 0; DevicePaths[DevicePathIndex] != NULL; DevicePathIndex++) {
-        FindVolumeAndFilename(DevicePaths[DevicePathIndex], &Volume, &Filename);
-        // Some EFIs crash if attempting to load driver for invalid architecture, so
-        // protect for this condition; but sometimes Volume comes back NULL, so provide
-        // an exception. (TODO: Handle this special condition better.)
-        if ((LoaderType == TYPE_LEGACY) || (Volume == NULL) || IsValidLoader(Volume->RootDir, Filename)) {
-            if (Filename && (LoaderType != TYPE_LEGACY)) {
-                Temp = PoolPrint(L"\\%s %s", Filename, FullLoadOptions ? FullLoadOptions : L"");
-                if (Temp != NULL) {
-                    MyFreePool(FullLoadOptions);
-                    FullLoadOptions = Temp;
-                }
-            } // if (Filename)
-
-            // NOTE: Below commented-out line could be more efficient if file were read ahead of
-            // time and passed as a pre-loaded image to LoadImage(), but it doesn't work on my
-            // 32-bit Mac Mini or my 64-bit Intel box when launching a Linux kernel; the
-            // kernel returns a "Failed to handle fs_proto" error message.
-            // TODO: Track down the cause of this error and fix it, if possible.
-            // ReturnStatus = Status = refit_call6_wrapper(BS->LoadImage, FALSE, SelfImageHandle, DevicePaths[DevicePathIndex],
-            //                                            ImageData, ImageSize, &ChildImageHandle);
-            ReturnStatus = Status = refit_call6_wrapper(BS->LoadImage, FALSE, SelfImageHandle, DevicePaths[DevicePathIndex],
-                                                        NULL, 0, &ChildImageHandle);
-            if (secure_mode() && ShimLoaded()) {
-                // Load ourself into memory. This is a trick to work around a bug in Shim 0.8,
-                // which ties itself into the BS->LoadImage() and BS->StartImage() functions and
-                // then unregisters itself from the EFI system table when its replacement
-                // StartImage() function is called *IF* the previous LoadImage() was for the same
-                // program. The result is that rEFInd can validate only the first program it
-                // launches (often a filesystem driver). Loading a second program (rEFInd itself,
-                // here, to keep it smaller than a kernel) works around this problem. See the
-                // replacements.c file in Shim, and especially its start_image() function, for
-                // the source of the problem.
-                // NOTE: This doesn't check the return status or handle errors. It could
-                // conceivably do weird things if, say, rEFInd were on a USB drive that the
-                // user pulls before launching a program.
-                refit_call6_wrapper(BS->LoadImage, FALSE, SelfImageHandle, GlobalConfig.SelfDevicePath,
-                                    NULL, 0, &ChildImageHandle2);
-            }
-        } else {
-            Print(L"Invalid loader file!\n");
-            ReturnStatus = EFI_LOAD_ERROR;
-        }
-        if (ReturnStatus != EFI_NOT_FOUND) {
-            break;
-        }
-    } // for
-    if ((Status == EFI_ACCESS_DENIED) || (Status == EFI_SECURITY_VIOLATION)) {
-        WarnSecureBootError(ImageTitle, Verbose);
-        goto bailout;
-    }
-    SPrint(ErrorInfo, 255, L"while loading %s", ImageTitle);
-    if (CheckError(Status, ErrorInfo)) {
-        if (ErrorInStep != NULL)
-            *ErrorInStep = 1;
-        goto bailout;
-    }
-
-    ReturnStatus = Status = refit_call3_wrapper(BS->HandleProtocol, ChildImageHandle, &LoadedImageProtocol,
-                                                (VOID **) &ChildLoadedImage);
-    if (CheckError(Status, L"while getting a LoadedImageProtocol handle")) {
-        if (ErrorInStep != NULL)
-            *ErrorInStep = 2;
-        goto bailout_unload;
-    }
-    ChildLoadedImage->LoadOptions = (VOID *)FullLoadOptions;
-    ChildLoadedImage->LoadOptionsSize = FullLoadOptions ? ((UINT32)StrLen(FullLoadOptions) + 1) * sizeof(CHAR16) : 0;
-    // turn control over to the image
-    // TODO: (optionally) re-enable the EFI watchdog timer!
-
-    // close open file handles
-    UninitRefitLib();
-    ReturnStatus = Status = refit_call3_wrapper(BS->StartImage, ChildImageHandle, NULL, NULL);
-
-    // control returns here when the child image calls Exit()
-    SPrint(ErrorInfo, 255, L"returned from %s", ImageTitle);
-    if (CheckError(Status, ErrorInfo)) {
-        if (ErrorInStep != NULL)
-            *ErrorInStep = 3;
-    }
-    if (IsDriver) {
-        // Below should have no effect on most systems, but works
-        // around bug with some EFIs that prevents filesystem drivers
-        // from binding to partitions.
-        ConnectFilesystemDriver(ChildImageHandle);
-    }
-
-    // re-open file handles
-    ReinitRefitLib();
-
-bailout_unload:
-    // unload the image, we don't care if it works or not...
-    if (!IsDriver)
-        Status = refit_call1_wrapper(BS->UnloadImage, ChildImageHandle);
-
-bailout:
-    MyFreePool(FullLoadOptions);
-    return ReturnStatus;
-} /* EFI_STATUS StartEFIImageList() */
-
-EFI_STATUS StartEFIImage(IN EFI_DEVICE_PATH *DevicePath,
-                         IN CHAR16 *LoadOptions, IN UINTN LoaderType,
-                         IN CHAR16 *ImageTitle, IN CHAR8 OSType,
-                         OUT UINTN *ErrorInStep,
-                         IN BOOLEAN Verbose,
-                         IN BOOLEAN IsDriver)
-{
-    EFI_DEVICE_PATH *DevicePaths[2];
-
-    DevicePaths[0] = DevicePath;
-    DevicePaths[1] = NULL;
-    return StartEFIImageList(DevicePaths, LoadOptions, LoaderType, ImageTitle, OSType, ErrorInStep, Verbose, IsDriver);
-} /* static EFI_STATUS StartEFIImage() */
-
-// From gummiboot: Reboot the computer into its built-in user interface
-static EFI_STATUS RebootIntoFirmware(VOID) {
-    CHAR8 *b;
-    UINTN size;
-    UINT64 osind;
-    EFI_STATUS err;
-
-    osind = EFI_OS_INDICATIONS_BOOT_TO_FW_UI;
-
-    err = EfivarGetRaw(&GlobalGuid, L"OsIndications", &b, &size);
-    if (err == EFI_SUCCESS)
-        osind |= (UINT64)*b;
-    MyFreePool(b);
-
-    err = EfivarSetRaw(&GlobalGuid, L"OsIndications", (CHAR8 *)&osind, sizeof(UINT64), TRUE);
-    if (err != EFI_SUCCESS)
-        return err;
-
-    refit_call4_wrapper(RT->ResetSystem, EfiResetCold, EFI_SUCCESS, 0, NULL);
-    Print(L"Error calling ResetSystem: %r", err);
-    PauseForKey();
-    return err;
-}
-
 // Record the value of the loader's name/description in rEFInd's "PreviousBoot" EFI variable,
 // if it's different from what's already stored there.
 VOID StoreLoaderName(IN CHAR16 *Name) {
-    EFI_STATUS   Status;
-    CHAR16       *OldName = NULL;
-    UINTN        Length;
 
     if (Name) {
-        Status = EfivarGetRaw(&RefindGuid, L"PreviousBoot", (CHAR8**) &OldName, &Length);
-        if ((Status != EFI_SUCCESS) || (StrCmp(OldName, Name) != 0)) {
-            EfivarSetRaw(&RefindGuid, L"PreviousBoot", (CHAR8*) Name, StrLen(Name) * 2 + 2, TRUE);
-        } // if
-        MyFreePool(OldName);
+        EfivarSetRaw(&RefindGuid, L"PreviousBoot", (CHAR8*) Name, StrLen(Name) * 2 + 2, TRUE);
     } // if
 } // VOID StoreLoaderName()
 
-//
-// EFI OS loader functions
-//
-
-// See http://www.thomas-krenn.com/en/wiki/Activating_the_Intel_VT_Virtualization_Feature
-// for information on Intel VMX features
-static VOID DoEnableAndLockVMX(VOID)
-{
-#if defined (EFIX64) | defined (EFI32)
-    UINT32 msr = 0x3a;
-    UINT32 low_bits = 0, high_bits = 0;
-
-    // is VMX active ?
-    __asm__ volatile ("rdmsr" : "=a" (low_bits), "=d" (high_bits) : "c" (msr));
-
-    // enable and lock vmx if not locked
-    if ((low_bits & 1) == 0) {
-        high_bits = 0;
-        low_bits = 0x05;
-        msr = 0x3a;
-        __asm__ volatile ("wrmsr" : : "c" (msr), "a" (low_bits), "d" (high_bits));
-    }
-#endif
-} // VOID DoEnableAndLockVMX()
-
-static VOID StartLoader(LOADER_ENTRY *Entry, CHAR16 *SelectionName)
-{
-    UINTN ErrorInStep = 0;
-
-    if (GlobalConfig.EnableAndLockVMX) {
-        DoEnableAndLockVMX();
-    }
-
-    BeginExternalScreen(Entry->UseGraphicsMode, L"Booting OS");
-    StoreLoaderName(SelectionName);
-    StartEFIImage(Entry->DevicePath, Entry->LoadOptions, TYPE_EFI,
-                  Basename(Entry->LoaderPath), Entry->OSType, &ErrorInStep, !Entry->UseGraphicsMode, FALSE);
-    FinishExternalScreen();
-}
-
-// Locate an initrd or initramfs file that matches the kernel specified by LoaderPath.
-// The matching file has a name that begins with "init" and includes the same version
-// number string as is found in LoaderPath -- but not a longer version number string.
-// For instance, if LoaderPath is \EFI\kernels\bzImage-3.3.0.efi, and if \EFI\kernels
-// has a file called initramfs-3.3.0.img, this function will return the string
-// '\EFI\kernels\initramfs-3.3.0.img'. If the directory ALSO contains the file
-// initramfs-3.3.0-rc7.img or initramfs-13.3.0.img, those files will NOT match.
-// If more than one initrd file matches the extracted version string, the one
-// that matches more characters AFTER (actually, from the start of) the version
-// string is used.
-// If no matching init file can be found, returns NULL.
-static CHAR16 * FindInitrd(IN CHAR16 *LoaderPath, IN REFIT_VOLUME *Volume) {
-    CHAR16              *InitrdName = NULL, *FileName, *KernelVersion, *InitrdVersion, *Path;
-    CHAR16              *KernelPostNum, *InitrdPostNum;
-    UINTN               MaxSharedChars, SharedChars;
-    STRING_LIST         *InitrdNames = NULL, *FinalInitrdName = NULL, *CurrentInitrdName = NULL, *MaxSharedInitrd;
-    REFIT_DIR_ITER      DirIter;
-    EFI_FILE_INFO       *DirEntry;
-
-    FileName = Basename(LoaderPath);
-    KernelVersion = FindNumbers(FileName);
-    Path = FindPath(LoaderPath);
-
-    // Add trailing backslash for root directory; necessary on some systems, but must
-    // NOT be added to all directories, since on other systems, a trailing backslash on
-    // anything but the root directory causes them to flake out!
-    if (StrLen(Path) == 0) {
-        MergeStrings(&Path, L"\\", 0);
-    } // if
-    DirIterOpen(Volume->RootDir, Path, &DirIter);
-    // Now add a trailing backslash if it was NOT added earlier, for consistency in
-    // building the InitrdName later....
-    if ((StrLen(Path) > 0) && (Path[StrLen(Path) - 1] != L'\\'))
-        MergeStrings(&Path, L"\\", 0);
-    while (DirIterNext(&DirIter, 2, L"init*", &DirEntry)) {
-        InitrdVersion = FindNumbers(DirEntry->FileName);
-        if (((KernelVersion != NULL) && (MyStriCmp(InitrdVersion, KernelVersion))) ||
-            ((KernelVersion == NULL) && (InitrdVersion == NULL))) {
-                CurrentInitrdName = AllocateZeroPool(sizeof(STRING_LIST));
-                if (InitrdNames == NULL)
-                    InitrdNames = FinalInitrdName = CurrentInitrdName;
-                if (CurrentInitrdName) {
-                    CurrentInitrdName->Value = PoolPrint(L"%s%s", Path, DirEntry->FileName);
-                    if (CurrentInitrdName != FinalInitrdName) {
-                        FinalInitrdName->Next = CurrentInitrdName;
-                        FinalInitrdName = CurrentInitrdName;
-                    } // if
-                } // if
-        } // if
-        MyFreePool(InitrdVersion);
-    } // while
-    if (InitrdNames) {
-        if (InitrdNames->Next == NULL) {
-            InitrdName = StrDuplicate(InitrdNames -> Value);
-        } else {
-            MaxSharedInitrd = CurrentInitrdName = InitrdNames;
-            MaxSharedChars = 0;
-            while (CurrentInitrdName != NULL) {
-                KernelPostNum = MyStrStr(LoaderPath, KernelVersion);
-                InitrdPostNum = MyStrStr(CurrentInitrdName->Value, KernelVersion);
-                SharedChars = NumCharsInCommon(KernelPostNum, InitrdPostNum);
-                if (SharedChars > MaxSharedChars) {
-                    MaxSharedChars = SharedChars;
-                    MaxSharedInitrd = CurrentInitrdName;
-                } // if
-                // TODO: Compute number of shared characters & compare with max.
-                CurrentInitrdName = CurrentInitrdName->Next;
-            }
-            if (MaxSharedInitrd)
-                InitrdName = StrDuplicate(MaxSharedInitrd->Value);
-        } // if/else
-    } // if
-    DeleteStringList(InitrdNames);
-
-    // Note: Don't FreePool(FileName), since Basename returns a pointer WITHIN the string it's passed.
-    MyFreePool(KernelVersion);
-    MyFreePool(Path);
-    return (InitrdName);
-} // static CHAR16 * FindInitrd()
-
-LOADER_ENTRY * AddPreparedLoaderEntry(LOADER_ENTRY *Entry) {
-    AddMenuEntry(&MainMenu, (REFIT_MENU_ENTRY *)Entry);
-
-    return(Entry);
-} // LOADER_ENTRY * AddPreparedLoaderEntry()
-
-// Creates a copy of a menu screen.
-// Returns a pointer to the copy of the menu screen.
-static REFIT_MENU_SCREEN* CopyMenuScreen(REFIT_MENU_SCREEN *Entry) {
-    REFIT_MENU_SCREEN *NewEntry;
-    UINTN i;
-
-    NewEntry = AllocateZeroPool(sizeof(REFIT_MENU_SCREEN));
-    if ((Entry != NULL) && (NewEntry != NULL)) {
-        CopyMem(NewEntry, Entry, sizeof(REFIT_MENU_SCREEN));
-        NewEntry->Title = (Entry->Title) ? StrDuplicate(Entry->Title) : NULL;
-        NewEntry->TimeoutText = (Entry->TimeoutText) ? StrDuplicate(Entry->TimeoutText) : NULL;
-        if (Entry->TitleImage != NULL) {
-            NewEntry->TitleImage = AllocatePool(sizeof(EG_IMAGE));
-            if (NewEntry->TitleImage != NULL)
-                CopyMem(NewEntry->TitleImage, Entry->TitleImage, sizeof(EG_IMAGE));
-        } // if
-        NewEntry->InfoLines = (CHAR16**) AllocateZeroPool(Entry->InfoLineCount * (sizeof(CHAR16*)));
-        for (i = 0; i < Entry->InfoLineCount && NewEntry->InfoLines; i++) {
-            NewEntry->InfoLines[i] = (Entry->InfoLines[i]) ? StrDuplicate(Entry->InfoLines[i]) : NULL;
-        } // for
-        NewEntry->Entries = (REFIT_MENU_ENTRY**) AllocateZeroPool(Entry->EntryCount * (sizeof (REFIT_MENU_ENTRY*)));
-        for (i = 0; i < Entry->EntryCount && NewEntry->Entries; i++) {
-            AddMenuEntry(NewEntry, Entry->Entries[i]);
-        } // for
-        NewEntry->Hint1 = (Entry->Hint1) ? StrDuplicate(Entry->Hint1) : NULL;
-        NewEntry->Hint2 = (Entry->Hint2) ? StrDuplicate(Entry->Hint2) : NULL;
-    } // if
-    return (NewEntry);
-} // static REFIT_MENU_SCREEN* CopyMenuScreen()
-
-// Creates a copy of a menu entry. Intended to enable moving a stack-based
-// menu entry (such as the ones for the "reboot" and "exit" functions) to
-// to the heap. This enables easier deletion of the whole set of menu
-// entries when re-scanning.
-// Returns a pointer to the copy of the menu entry.
-static REFIT_MENU_ENTRY* CopyMenuEntry(REFIT_MENU_ENTRY *Entry) {
-    REFIT_MENU_ENTRY *NewEntry;
-
-    NewEntry = AllocateZeroPool(sizeof(REFIT_MENU_ENTRY));
-    if ((Entry != NULL) && (NewEntry != NULL)) {
-        CopyMem(NewEntry, Entry, sizeof(REFIT_MENU_ENTRY));
-        NewEntry->Title = (Entry->Title) ? StrDuplicate(Entry->Title) : NULL;
-        if (Entry->BadgeImage != NULL) {
-            NewEntry->BadgeImage = AllocatePool(sizeof(EG_IMAGE));
-            if (NewEntry->BadgeImage != NULL)
-                CopyMem(NewEntry->BadgeImage, Entry->BadgeImage, sizeof(EG_IMAGE));
-        }
-        if (Entry->Image != NULL) {
-            NewEntry->Image = AllocatePool(sizeof(EG_IMAGE));
-            if (NewEntry->Image != NULL)
-                CopyMem(NewEntry->Image, Entry->Image, sizeof(EG_IMAGE));
-        }
-        if (Entry->SubScreen != NULL) {
-            NewEntry->SubScreen = CopyMenuScreen(Entry->SubScreen);
-        }
-    } // if
-    return (NewEntry);
-} // REFIT_MENU_ENTRY* CopyMenuEntry()
-
-// Creates a new LOADER_ENTRY data structure and populates it with
-// default values from the specified Entry, or NULL values if Entry
-// is unspecified (NULL).
-// Returns a pointer to the new data structure, or NULL if it
-// couldn't be allocated
-LOADER_ENTRY *InitializeLoaderEntry(IN LOADER_ENTRY *Entry) {
-    LOADER_ENTRY *NewEntry = NULL;
-
-    NewEntry = AllocateZeroPool(sizeof(LOADER_ENTRY));
-    if (NewEntry != NULL) {
-        NewEntry->me.Title        = NULL;
-        NewEntry->me.Tag          = TAG_LOADER;
-        NewEntry->Enabled         = TRUE;
-        NewEntry->UseGraphicsMode = FALSE;
-        NewEntry->OSType          = 0;
-        NewEntry->DiscoveryType   = DISCOVERY_TYPE_UNKNOWN;
-        if (Entry != NULL) {
-            NewEntry->LoaderPath      = (Entry->LoaderPath) ? StrDuplicate(Entry->LoaderPath) : NULL;
-            NewEntry->VolName         = (Entry->VolName) ? StrDuplicate(Entry->VolName) : NULL;
-            NewEntry->DevicePath      = Entry->DevicePath;
-            NewEntry->UseGraphicsMode = Entry->UseGraphicsMode;
-            NewEntry->LoadOptions     = (Entry->LoadOptions) ? StrDuplicate(Entry->LoadOptions) : NULL;
-            NewEntry->InitrdPath      = (Entry->InitrdPath) ? StrDuplicate(Entry->InitrdPath) : NULL;
-            NewEntry->DiscoveryType   = Entry->DiscoveryType;
-        }
-    } // if
-    return (NewEntry);
-} // LOADER_ENTRY *InitializeLoaderEntry()
-
-// Adds InitrdPath to Options, but only if Options doesn't already include an
-// initrd= line. Done to enable overriding the default initrd selection in a
-// refind_linux.conf file's options list.
-// Returns a pointer to a new string. The calling function is responsible for
-// freeing its memory.
-static CHAR16 *AddInitrdToOptions(CHAR16 *Options, CHAR16 *InitrdPath) {
-    CHAR16 *NewOptions = NULL;
-
-    if (Options != NULL)
-        NewOptions = StrDuplicate(Options);
-    if ((InitrdPath != NULL) && !StriSubCmp(L"initrd=", Options)) {
-        MergeStrings(&NewOptions, L"initrd=", L' ');
-        MergeStrings(&NewOptions, InitrdPath, 0);
-    }
-    return NewOptions;
-} // CHAR16 *AddInitrdToOptions()
-
-// Prepare a REFIT_MENU_SCREEN data structure for a subscreen entry. This sets up
-// the default entry that launches the boot loader using the same options as the
-// main Entry does. Subsequent options can be added by the calling function.
-// If a subscreen already exists in the Entry that's passed to this function,
-// it's left unchanged and a pointer to it is returned.
-// Returns a pointer to the new subscreen data structure, or NULL if there
-// were problems allocating memory.
-REFIT_MENU_SCREEN *InitializeSubScreen(IN LOADER_ENTRY *Entry) {
-    CHAR16              *FileName, *MainOptions = NULL;
-    REFIT_MENU_SCREEN   *SubScreen = NULL;
-    LOADER_ENTRY        *SubEntry;
-
-    FileName = Basename(Entry->LoaderPath);
-    if (Entry->me.SubScreen == NULL) { // No subscreen yet; initialize default entry....
-        SubScreen = AllocateZeroPool(sizeof(REFIT_MENU_SCREEN));
-        if (SubScreen != NULL) {
-            SubScreen->Title = AllocateZeroPool(sizeof(CHAR16) * 256);
-            SPrint(SubScreen->Title, 255, L"Boot Options for %s on %s",
-                   (Entry->Title != NULL) ? Entry->Title : FileName, Entry->VolName);
-            SubScreen->TitleImage = Entry->me.Image;
-            // default entry
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title = StrDuplicate(L"Boot using default options");
-                MainOptions = SubEntry->LoadOptions;
-                SubEntry->LoadOptions = AddInitrdToOptions(MainOptions, SubEntry->InitrdPath);
-                MyFreePool(MainOptions);
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            } // if (SubEntry != NULL)
-            SubScreen->Hint1 = StrDuplicate(SUBSCREEN_HINT1);
-            if (GlobalConfig.HideUIFlags & HIDEUI_FLAG_EDITOR) {
-                SubScreen->Hint2 = StrDuplicate(SUBSCREEN_HINT2_NO_EDITOR);
-            } else {
-                SubScreen->Hint2 = StrDuplicate(SUBSCREEN_HINT2);
-            } // if/else
-        } // if (SubScreen != NULL)
-    } else { // existing subscreen; less initialization, and just add new entry later....
-        SubScreen = Entry->me.SubScreen;
-    } // if/else
-    return SubScreen;
-} // REFIT_MENU_SCREEN *InitializeSubScreen()
-
-VOID GenerateSubScreen(LOADER_ENTRY *Entry, IN REFIT_VOLUME *Volume, IN BOOLEAN GenerateReturn) {
-    REFIT_MENU_SCREEN  *SubScreen;
-    LOADER_ENTRY       *SubEntry;
-    CHAR16             *InitrdName, *KernelVersion = NULL;
-    CHAR16             DiagsFileName[256];
-    REFIT_FILE         *File;
-    UINTN              TokenCount;
-    CHAR16             **TokenList;
-
-    // create the submenu
-    if (StrLen(Entry->Title) == 0) {
-        MyFreePool(Entry->Title);
-        Entry->Title = NULL;
-    }
-    SubScreen = InitializeSubScreen(Entry);
-
-    // loader-specific submenu entries
-    if (Entry->OSType == 'M') {          // entries for macOS
-#if defined(EFIX64)
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot macOS with a 64-bit kernel";
-            SubEntry->LoadOptions     = L"arch=x86_64";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_OSX;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        } // if
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot macOS with a 32-bit kernel";
-            SubEntry->LoadOptions     = L"arch=i386";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_OSX;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        } // if
-#endif
-
-        if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_SINGLEUSER)) {
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title        = L"Boot macOS in verbose mode";
-                SubEntry->UseGraphicsMode = FALSE;
-                SubEntry->LoadOptions     = L"-v";
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            } // if
-
-#if defined(EFIX64)
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title        = L"Boot macOS in verbose mode (64-bit)";
-                SubEntry->UseGraphicsMode = FALSE;
-                SubEntry->LoadOptions     = L"-v arch=x86_64";
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            }
-
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title        = L"Boot macOS in verbose mode (32-bit)";
-                SubEntry->UseGraphicsMode = FALSE;
-                SubEntry->LoadOptions     = L"-v arch=i386";
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            }
-#endif
-
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title        = L"Boot macOS in single user mode";
-                SubEntry->UseGraphicsMode = FALSE;
-                SubEntry->LoadOptions     = L"-v -s";
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            } // if
-        } // single-user mode allowed
-
-        if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_SAFEMODE)) {
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title        = L"Boot macOS in safe mode";
-                SubEntry->UseGraphicsMode = FALSE;
-                SubEntry->LoadOptions     = L"-v -x";
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            } // if
-        } // safe mode allowed
-
-        // check for Apple hardware diagnostics
-        StrCpy(DiagsFileName, L"System\\Library\\CoreServices\\.diagnostics\\diags.efi");
-        if (FileExists(Volume->RootDir, DiagsFileName) && !(GlobalConfig.HideUIFlags & HIDEUI_FLAG_HWTEST)) {
-            SubEntry = InitializeLoaderEntry(Entry);
-            if (SubEntry != NULL) {
-                SubEntry->me.Title        = L"Run Apple Hardware Test";
-                MyFreePool(SubEntry->LoaderPath);
-                SubEntry->LoaderPath      = StrDuplicate(DiagsFileName);
-                SubEntry->DevicePath      = FileDevicePath(Volume->DeviceHandle, SubEntry->LoaderPath);
-                SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_OSX;
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            } // if
-        } // if diagnostics entry found
-
-    } else if (Entry->OSType == 'L') {   // entries for Linux kernels with EFI stub loaders
-        File = ReadLinuxOptionsFile(Entry->LoaderPath, Volume);
-        if (File != NULL) {
-            InitrdName =  FindInitrd(Entry->LoaderPath, Volume);
-            TokenCount = ReadTokenLine(File, &TokenList);
-            KernelVersion = FindNumbers(Entry->LoaderPath);
-            ReplaceSubstring(&(TokenList[1]), KERNEL_VERSION, KernelVersion);
-            // first entry requires special processing, since it was initially set
-            // up with a default title but correct options by InitializeSubScreen(),
-            // earlier....
-            if ((TokenCount > 1) && (SubScreen->Entries != NULL) && (SubScreen->Entries[0] != NULL)) {
-                MyFreePool(SubScreen->Entries[0]->Title);
-                SubScreen->Entries[0]->Title = TokenList[0] ? StrDuplicate(TokenList[0]) : StrDuplicate(L"Boot Linux");
-            } // if
-            FreeTokenLine(&TokenList, &TokenCount);
-            while ((TokenCount = ReadTokenLine(File, &TokenList)) > 1) {
-                ReplaceSubstring(&(TokenList[1]), KERNEL_VERSION, KernelVersion);
-                SubEntry = InitializeLoaderEntry(Entry);
-                SubEntry->me.Title = TokenList[0] ? StrDuplicate(TokenList[0]) : StrDuplicate(L"Boot Linux");
-                MyFreePool(SubEntry->LoadOptions);
-                SubEntry->LoadOptions = AddInitrdToOptions(TokenList[1], InitrdName);
-                FreeTokenLine(&TokenList, &TokenCount);
-                SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_LINUX;
-                AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-            } // while
-            MyFreePool(KernelVersion);
-            MyFreePool(InitrdName);
-            MyFreePool(File);
-        } // if
-
-    } else if (Entry->OSType == 'E') {   // entries for ELILO
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Run ELILO in interactive mode";
-            SubEntry->LoadOptions     = L"-p";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_ELILO;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot Linux for a 17\" iMac or a 15\" MacBook Pro (*)";
-            SubEntry->LoadOptions     = L"-d 0 i17";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_ELILO;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot Linux for a 20\" iMac (*)";
-            SubEntry->LoadOptions     = L"-d 0 i20";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_ELILO;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot Linux for a Mac Mini (*)";
-            SubEntry->LoadOptions     = L"-d 0 mini";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_ELILO;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-
-        AddMenuInfoLine(SubScreen, L"NOTE: This is an example. Entries");
-        AddMenuInfoLine(SubScreen, L"marked with (*) may not work.");
-
-    } else if (Entry->OSType == 'X') {   // entries for xom.efi
-        // by default, skip the built-in selection and boot from hard disk only
-        Entry->LoadOptions = L"-s -h";
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot Windows from Hard Disk";
-            SubEntry->LoadOptions     = L"-s -h";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_WINDOWS;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Boot Windows from CD-ROM";
-            SubEntry->LoadOptions     = L"-s -c";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_WINDOWS;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-
-        SubEntry = InitializeLoaderEntry(Entry);
-        if (SubEntry != NULL) {
-            SubEntry->me.Title        = L"Run XOM in text mode";
-            SubEntry->LoadOptions     = L"-v";
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_WINDOWS;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        }
-    } // entries for xom.efi
-    if (GenerateReturn)
-        AddMenuEntry(SubScreen, &MenuEntryReturn);
-    Entry->me.SubScreen = SubScreen;
-} // VOID GenerateSubScreen()
-
-// Returns options for a Linux kernel. Reads them from an options file in the
-// kernel's directory; and if present, adds an initrd= option for an initial
-// RAM disk file with the same version number as the kernel file.
-static CHAR16 * GetMainLinuxOptions(IN CHAR16 * LoaderPath, IN REFIT_VOLUME *Volume) {
-    CHAR16 *Options = NULL, *InitrdName, *FullOptions = NULL, *KernelVersion;
-
-    Options = GetFirstOptionsFromFile(LoaderPath, Volume);
-    InitrdName = FindInitrd(LoaderPath, Volume);
-    KernelVersion = FindNumbers(InitrdName);
-    ReplaceSubstring(&Options, KERNEL_VERSION, KernelVersion);
-    FullOptions = AddInitrdToOptions(Options, InitrdName);
-
-    MyFreePool(Options);
-    MyFreePool(InitrdName);
-    MyFreePool(KernelVersion);
-    return (FullOptions);
-} // static CHAR16 * GetMainLinuxOptions()
-
-// Read the specified file and add values of "ID", "NAME", or "DISTRIB_ID" tokens to
-// OSIconName list. Intended for adding Linux distribution clues gleaned from
-// /etc/lsb-release and /etc/os-release files.
-static VOID ParseReleaseFile(CHAR16 **OSIconName, REFIT_VOLUME *Volume, CHAR16 *FileName) {
-    UINTN       FileSize = 0;
-    REFIT_FILE  File;
-    CHAR16      **TokenList;
-    UINTN       TokenCount = 0;
-
-    if ((Volume == NULL) || (FileName == NULL) || (OSIconName == NULL) || (*OSIconName == NULL))
-        return;
-
-    if (FileExists(Volume->RootDir, FileName) &&
-        (ReadFile(Volume->RootDir, FileName, &File, &FileSize) == EFI_SUCCESS)) {
-        do {
-            TokenCount = ReadTokenLine(&File, &TokenList);
-            if ((TokenCount > 1) && (MyStriCmp(TokenList[0], L"ID") ||
-                                     MyStriCmp(TokenList[0], L"NAME") ||
-                                     MyStriCmp(TokenList[0], L"DISTRIB_ID"))) {
-                MergeWords(OSIconName, TokenList[1], L',');
-            } // if
-            FreeTokenLine(&TokenList, &TokenCount);
-        } while (TokenCount > 0);
-        MyFreePool(File.Buffer);
-    } // if
-} // VOID ParseReleaseFile()
-
-// Try to guess the name of the Linux distribution & add that name to
-// OSIconName list.
-static VOID GuessLinuxDistribution(CHAR16 **OSIconName, REFIT_VOLUME *Volume, CHAR16 *LoaderPath) {
-    // If on Linux root fs, /etc/os-release or /etc/lsb-release file probably has clues....
-    ParseReleaseFile(OSIconName, Volume, L"etc\\lsb-release");
-    ParseReleaseFile(OSIconName, Volume, L"etc\\os-release");
-
-    // Search for clues in the kernel's filename....
-    if (StriSubCmp(L".fc", LoaderPath))
-        MergeStrings(OSIconName, L"fedora", L',');
-    if (StriSubCmp(L".el", LoaderPath))
-        MergeStrings(OSIconName, L"redhat", L',');
-} // VOID GuessLinuxDistribution()
-
-// Sets a few defaults for a loader entry -- mainly the icon, but also the OS type
-// code and shortcut letter. For Linux EFI stub loaders, also sets kernel options
-// that will (with luck) work fairly automatically.
-VOID SetLoaderDefaults(LOADER_ENTRY *Entry, CHAR16 *LoaderPath, REFIT_VOLUME *Volume) {
-    CHAR16      *NameClues, *PathOnly, *NoExtension, *OSIconName = NULL, *Temp;
-    CHAR16      ShortcutLetter = 0;
-
-    NameClues = Basename(LoaderPath);
-    PathOnly = FindPath(LoaderPath);
-    NoExtension = StripEfiExtension(NameClues);
-
-    if (Volume->DiskKind == DISK_KIND_NET) {
-        MergeStrings(&NameClues, Entry->me.Title, L' ');
-    } else {
-        // locate a custom icon for the loader
-        // Anything found here takes precedence over the "hints" in the OSIconName variable
-        if (!Entry->me.Image) {
-            Entry->me.Image = egLoadIconAnyType(Volume->RootDir, PathOnly, NoExtension, GlobalConfig.IconSizes[ICON_SIZE_BIG]);
-        }
-        if (!Entry->me.Image) {
-            Entry->me.Image = egCopyImage(Volume->VolIconImage);
-        }
-
-        // Begin creating icon "hints" by using last part of directory path leading
-        // to the loader
-        Temp = FindLastDirName(LoaderPath);
-        MergeStrings(&OSIconName, Temp, L',');
-        MyFreePool(Temp);
-        Temp = NULL;
-        if (OSIconName != NULL) {
-            ShortcutLetter = OSIconName[0];
-        }
-
-        // Add every "word" in the volume label, delimited by spaces, dashes (-), or
-        // underscores (_), to the list of hints to be used in searching for OS
-        // icons.
-        MergeWords(&OSIconName, Volume->VolName, L',');
-    } // if/else network boot
-
-    // detect specific loaders
-    if (StriSubCmp(L"bzImage", NameClues) || StriSubCmp(L"vmlinuz", NameClues) || StriSubCmp(L"kernel", NameClues)) {
-        if (Volume->DiskKind != DISK_KIND_NET) {
-            GuessLinuxDistribution(&OSIconName, Volume, LoaderPath);
-            Entry->LoadOptions = GetMainLinuxOptions(LoaderPath, Volume);
-        }
-        MergeStrings(&OSIconName, L"linux", L',');
-        Entry->OSType = 'L';
-        if (ShortcutLetter == 0)
-            ShortcutLetter = 'L';
-        Entry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_LINUX;
-    } else if (StriSubCmp(L"refit", LoaderPath)) {
-        MergeStrings(&OSIconName, L"refit", L',');
-        Entry->OSType = 'R';
-        ShortcutLetter = 'R';
-    } else if (StriSubCmp(L"refind", LoaderPath)) {
-        MergeStrings(&OSIconName, L"refind", L',');
-        Entry->OSType = 'R';
-        ShortcutLetter = 'R';
-    } else if (MyStriCmp(LoaderPath, MACOSX_LOADER_PATH)) {
-        MergeStrings(&OSIconName, L"mac", L',');
-        Entry->OSType = 'M';
-        ShortcutLetter = 'M';
-        Entry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_OSX;
-    } else if (MyStriCmp(NameClues, L"diags.efi")) {
-        MergeStrings(&OSIconName, L"hwtest", L',');
-    } else if (MyStriCmp(NameClues, L"e.efi") || MyStriCmp(NameClues, L"elilo.efi") || StriSubCmp(L"elilo", NameClues)) {
-        MergeStrings(&OSIconName, L"elilo,linux", L',');
-        Entry->OSType = 'E';
-        if (ShortcutLetter == 0)
-            ShortcutLetter = 'L';
-        Entry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_ELILO;
-    } else if (StriSubCmp(L"grub", NameClues)) {
-        MergeStrings(&OSIconName, L"grub,linux", L',');
-        Entry->OSType = 'G';
-        ShortcutLetter = 'G';
-        Entry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_GRUB;
-    } else if (MyStriCmp(NameClues, L"cdboot.efi") ||
-               MyStriCmp(NameClues, L"bootmgr.efi") ||
-               MyStriCmp(NameClues, L"bootmgfw.efi") ||
-               MyStriCmp(NameClues, L"bkpbootmgfw.efi")) {
-        MergeStrings(&OSIconName, L"win8", L',');
-        Entry->OSType = 'W';
-        ShortcutLetter = 'W';
-        Entry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_WINDOWS;
-    } else if (MyStriCmp(NameClues, L"xom.efi")) {
-        MergeStrings(&OSIconName, L"xom,win,win8", L',');
-        Entry->OSType = 'X';
-        ShortcutLetter = 'W';
-        Entry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_WINDOWS;
-    }
-    else if (StriSubCmp(L"ipxe", NameClues)) {
-        Entry->OSType = 'N';
-        ShortcutLetter = 'N';
-        MergeStrings(&OSIconName, L"network", L',');
-    } 
-
-    if ((ShortcutLetter >= 'a') && (ShortcutLetter <= 'z'))
-        ShortcutLetter = ShortcutLetter - 'a' + 'A'; // convert lowercase to uppercase
-    Entry->me.ShortcutLetter = ShortcutLetter;
-    if (Entry->me.Image == NULL)
-        Entry->me.Image = LoadOSIcon(OSIconName, L"unknown", FALSE);
-    MyFreePool(PathOnly);
-} // VOID SetLoaderDefaults()
-
-// Add a specified EFI boot loader to the list, using automatic settings
-// for icons, options, etc.
-static LOADER_ENTRY * AddLoaderEntry(IN CHAR16 *LoaderPath, IN CHAR16 *LoaderTitle, IN REFIT_VOLUME *Volume, IN BOOLEAN SubScreenReturn) {
-    LOADER_ENTRY  *Entry;
-
-    CleanUpPathNameSlashes(LoaderPath);
-    Entry = InitializeLoaderEntry(NULL);
-    Entry->DiscoveryType = DISCOVERY_TYPE_AUTO;
-    if (Entry != NULL) {
-        Entry->Title = StrDuplicate((LoaderTitle != NULL) ? LoaderTitle : LoaderPath);
-        Entry->me.Title = AllocateZeroPool(sizeof(CHAR16) * 256);
-        // Extra space at end of Entry->me.Title enables searching on Volume->VolName even if another volume
-        // name is identical except for something added to the end (e.g., VolB1 vs. VolB12).
-        // Note: Volume->VolName will be NULL for network boot programs.
-        if ((Volume->VolName) && (!MyStriCmp(Volume->VolName, L"Recovery HD")))
-            SPrint(Entry->me.Title, 255, L"Boot %s from %s ", (LoaderTitle != NULL) ? LoaderTitle : LoaderPath, Volume->VolName);
-        else
-            SPrint(Entry->me.Title, 255, L"Boot %s ", (LoaderTitle != NULL) ? LoaderTitle : LoaderPath);
-        Entry->me.Row = 0;
-        Entry->me.BadgeImage = Volume->VolBadgeImage;
-        if ((LoaderPath != NULL) && (LoaderPath[0] != L'\\')) {
-            Entry->LoaderPath = StrDuplicate(L"\\");
-        } else {
-            Entry->LoaderPath = NULL;
-        }
-        MergeStrings(&(Entry->LoaderPath), LoaderPath, 0);
-        Entry->VolName = Volume->VolName;
-        Entry->DevicePath = FileDevicePath(Volume->DeviceHandle, Entry->LoaderPath);
-        SetLoaderDefaults(Entry, LoaderPath, Volume);
-        GenerateSubScreen(Entry, Volume, SubScreenReturn);
-        AddMenuEntry(&MainMenu, (REFIT_MENU_ENTRY *)Entry);
-    }
-
-    return(Entry);
-} // LOADER_ENTRY * AddLoaderEntry()
-
-// Add a Linux kernel as a submenu entry for another (pre-existing) Linux kernel entry.
-static VOID AddKernelToSubmenu(LOADER_ENTRY * TargetLoader, CHAR16 *FileName, REFIT_VOLUME *Volume) {
-    REFIT_FILE          *File;
-    CHAR16              **TokenList = NULL, *InitrdName, *SubmenuName = NULL, *VolName = NULL;
-    CHAR16              *Path = NULL, *Title, *KernelVersion;
-    REFIT_MENU_SCREEN   *SubScreen;
-    LOADER_ENTRY        *SubEntry;
-    UINTN               TokenCount;
-
-    File = ReadLinuxOptionsFile(TargetLoader->LoaderPath, Volume);
-    if (File != NULL) {
-        SubScreen = TargetLoader->me.SubScreen;
-        InitrdName = FindInitrd(FileName, Volume);
-        KernelVersion = FindNumbers(FileName);
-        while ((TokenCount = ReadTokenLine(File, &TokenList)) > 1) {
-            ReplaceSubstring(&(TokenList[1]), KERNEL_VERSION, KernelVersion);
-            SubEntry = InitializeLoaderEntry(TargetLoader);
-            SplitPathName(FileName, &VolName, &Path, &SubmenuName);
-            MergeStrings(&SubmenuName, L": ", '\0');
-            MergeStrings(&SubmenuName, TokenList[0] ? StrDuplicate(TokenList[0]) : StrDuplicate(L"Boot Linux"), '\0');
-            Title = StrDuplicate(SubmenuName);
-            LimitStringLength(Title, MAX_LINE_LENGTH);
-            SubEntry->me.Title = Title;
-            MyFreePool(SubEntry->LoadOptions);
-            SubEntry->LoadOptions = AddInitrdToOptions(TokenList[1], InitrdName);
-            MyFreePool(SubEntry->LoaderPath);
-            SubEntry->LoaderPath = StrDuplicate(FileName);
-            CleanUpPathNameSlashes(SubEntry->LoaderPath);
-            SubEntry->DevicePath = FileDevicePath(Volume->DeviceHandle, SubEntry->LoaderPath);
-            FreeTokenLine(&TokenList, &TokenCount);
-            SubEntry->UseGraphicsMode = GlobalConfig.GraphicsFor & GRAPHICS_FOR_LINUX;
-            AddMenuEntry(SubScreen, (REFIT_MENU_ENTRY *)SubEntry);
-        } // while
-        MyFreePool(VolName);
-        MyFreePool(Path);
-        MyFreePool(SubmenuName);
-        MyFreePool(InitrdName);
-        MyFreePool(File);
-        MyFreePool(KernelVersion);
-    } // if
-} // static VOID AddKernelToSubmenu()
-
-// Returns -1 if (Time1 < Time2), +1 if (Time1 > Time2), or 0 if
-// (Time1 == Time2). Precision is only to the nearest second; since
-// this is used for sorting boot loader entries, differences smaller
-// than this are likely to be meaningless (and unlikely!).
-INTN TimeComp(IN EFI_TIME *Time1, IN EFI_TIME *Time2) {
-    INT64 Time1InSeconds, Time2InSeconds;
-
-    // Following values are overestimates; I'm assuming 31 days in every month.
-    // This is fine for the purpose of this function, which is limited
-    Time1InSeconds = Time1->Second + (Time1->Minute * 60) + (Time1->Hour * 3600) + (Time1->Day * 86400) +
-                        (Time1->Month * 2678400) + ((Time1->Year - 1998) * 32140800);
-    Time2InSeconds = Time2->Second + (Time2->Minute * 60) + (Time2->Hour * 3600) + (Time2->Day * 86400) +
-                        (Time2->Month * 2678400) + ((Time2->Year - 1998) * 32140800);
-    if (Time1InSeconds < Time2InSeconds)
-        return (-1);
-    else if (Time1InSeconds > Time2InSeconds)
-        return (1);
-
-    return 0;
-} // INTN TimeComp()
-
-// Adds a loader list element, keeping it sorted by date. EXCEPTION: Fedora's rescue
-// kernel, which begins with "vmlinuz-0-rescue," should not be at the top of the list,
-// since that will make it the default if kernel folding is enabled, so float it to
-// the end.
-// Returns the new first element (the one with the most recent date).
-static struct LOADER_LIST * AddLoaderListEntry(struct LOADER_LIST *LoaderList, struct LOADER_LIST *NewEntry) {
-    struct LOADER_LIST *LatestEntry, *CurrentEntry, *PrevEntry = NULL;
-    BOOLEAN LinuxRescue = FALSE;
-
-    LatestEntry = CurrentEntry = LoaderList;
-    if (LoaderList == NULL) {
-        LatestEntry = NewEntry;
-    } else {
-        if (StriSubCmp(L"vmlinuz-0-rescue", NewEntry->FileName))
-            LinuxRescue = TRUE;
-        while ((CurrentEntry != NULL) && !StriSubCmp(L"vmlinuz-0-rescue", CurrentEntry->FileName) &&
-               (LinuxRescue || (TimeComp(&(NewEntry->TimeStamp), &(CurrentEntry->TimeStamp)) < 0))) {
-            PrevEntry = CurrentEntry;
-            CurrentEntry = CurrentEntry->NextEntry;
-        } // while
-        NewEntry->NextEntry = CurrentEntry;
-        if (PrevEntry == NULL) {
-            LatestEntry = NewEntry;
-        } else {
-            PrevEntry->NextEntry = NewEntry;
-        } // if/else
-    } // if/else
-    return (LatestEntry);
-} // static VOID AddLoaderListEntry()
-
-// Delete the LOADER_LIST linked list
-static VOID CleanUpLoaderList(struct LOADER_LIST *LoaderList) {
-    struct LOADER_LIST *Temp;
-
-    while (LoaderList != NULL) {
-        Temp = LoaderList;
-        LoaderList = LoaderList->NextEntry;
-        MyFreePool(Temp->FileName);
-        MyFreePool(Temp);
-    } // while
-} // static VOID CleanUpLoaderList()
-
-// Returns FALSE if the specified file/volume matches the GlobalConfig.DontScanDirs
-// or GlobalConfig.DontScanVolumes specification, or if Path points to a volume
-// other than the one specified by Volume, or if the specified path is SelfDir.
-// Returns TRUE if none of these conditions is met -- that is, if the path is
-// eligible for scanning.
-static BOOLEAN ShouldScan(REFIT_VOLUME *Volume, CHAR16 *Path) {
-    CHAR16   *VolName = NULL, *DontScanDir, *PathCopy = NULL, *VolGuid = NULL;
-    UINTN    i = 0;
-    BOOLEAN  ScanIt = TRUE;
-
-    VolGuid = GuidAsString(&(Volume->PartGuid));
-    if ((IsIn(Volume->VolName, GlobalConfig.DontScanVolumes)) || (IsIn(Volume->PartName, GlobalConfig.DontScanVolumes)) ||
-        (IsIn(VolGuid, GlobalConfig.DontScanVolumes))) {
-        MyFreePool(VolGuid);
-        return FALSE;
-    } else {
-        MyFreePool(VolGuid);
-    } // if/else
-
-    if (MyStriCmp(Path, SelfDirPath) && (Volume->DeviceHandle == SelfVolume->DeviceHandle))
-        return FALSE;
-
-    // See if Path includes an explicit volume declaration that's NOT Volume....
-    PathCopy = StrDuplicate(Path);
-    if (SplitVolumeAndFilename(&PathCopy, &VolName)) {
-        if (VolName && !MyStriCmp(VolName, Volume->VolName)) {
-            ScanIt = FALSE;
-        } // if
-    } // if Path includes volume specification
-    MyFreePool(PathCopy);
-    MyFreePool(VolName);
-    VolName = NULL;
-
-    // See if Volume is in GlobalConfig.DontScanDirs....
-    while (ScanIt && (DontScanDir = FindCommaDelimited(GlobalConfig.DontScanDirs, i++))) {
-        SplitVolumeAndFilename(&DontScanDir, &VolName);
-        CleanUpPathNameSlashes(DontScanDir);
-        if (VolName != NULL) {
-            if (VolumeMatchesDescription(Volume, VolName) && MyStriCmp(DontScanDir, Path))
-                ScanIt = FALSE;
-        } else {
-            if (MyStriCmp(DontScanDir, Path))
-                ScanIt = FALSE;
-        }
-        MyFreePool(DontScanDir);
-        MyFreePool(VolName);
-        DontScanDir = NULL;
-        VolName = NULL;
-    } // while()
-
-    return ScanIt;
-} // BOOLEAN ShouldScan()
-
-// Returns TRUE if the file is byte-for-byte identical with the fallback file
-// on the volume AND if the file is not itself the fallback file; returns
-// FALSE if the file is not identical to the fallback file OR if the file
-// IS the fallback file. Intended for use in excluding the fallback boot
-// loader when it's a duplicate of another boot loader.
-static BOOLEAN DuplicatesFallback(IN REFIT_VOLUME *Volume, IN CHAR16 *FileName) {
-    CHAR8           *FileContents, *FallbackContents;
-    EFI_FILE_HANDLE FileHandle, FallbackHandle;
-    EFI_FILE_INFO   *FileInfo, *FallbackInfo;
-    UINTN           FileSize = 0, FallbackSize = 0;
-    EFI_STATUS      Status;
-    BOOLEAN         AreIdentical = FALSE;
-
-    if (!FileExists(Volume->RootDir, FileName) || !FileExists(Volume->RootDir, FALLBACK_FULLNAME))
-        return FALSE;
-
-    CleanUpPathNameSlashes(FileName);
-
-    if (MyStriCmp(FileName, FALLBACK_FULLNAME))
-        return FALSE; // identical filenames, so not a duplicate....
-
-    Status = refit_call5_wrapper(Volume->RootDir->Open, Volume->RootDir, &FileHandle, FileName, EFI_FILE_MODE_READ, 0);
-    if (Status == EFI_SUCCESS) {
-        FileInfo = LibFileInfo(FileHandle);
-        FileSize = FileInfo->FileSize;
-    } else {
-        return FALSE;
-    }
-
-    Status = refit_call5_wrapper(Volume->RootDir->Open, Volume->RootDir, &FallbackHandle, FALLBACK_FULLNAME, EFI_FILE_MODE_READ, 0);
-    if (Status == EFI_SUCCESS) {
-        FallbackInfo = LibFileInfo(FallbackHandle);
-        FallbackSize = FallbackInfo->FileSize;
-    } else {
-        refit_call1_wrapper(FileHandle->Close, FileHandle);
-        return FALSE;
-    }
-
-    if (FallbackSize == FileSize) { // could be identical; do full check....
-        FileContents = AllocatePool(FileSize);
-        FallbackContents = AllocatePool(FallbackSize);
-        if (FileContents && FallbackContents) {
-            Status = refit_call3_wrapper(FileHandle->Read, FileHandle, &FileSize, FileContents);
-            if (Status == EFI_SUCCESS) {
-                Status = refit_call3_wrapper(FallbackHandle->Read, FallbackHandle, &FallbackSize, FallbackContents);
-            }
-            if (Status == EFI_SUCCESS) {
-                AreIdentical = (CompareMem(FileContents, FallbackContents, FileSize) == 0);
-            } // if
-        } // if
-        MyFreePool(FileContents);
-        MyFreePool(FallbackContents);
-    } // if/else
-
-    // BUG ALERT: Some systems (e.g., DUET, some Macs with large displays) crash if the
-    // following two calls are reversed. Go figure....
-    refit_call1_wrapper(FileHandle->Close, FallbackHandle);
-    refit_call1_wrapper(FileHandle->Close, FileHandle);
-    return AreIdentical;
-} // BOOLEAN DuplicatesFallback()
-
-// Returns FALSE if two measures of file size are identical for a single file,
-// TRUE if not or if the file can't be opened and the other measure is non-0.
-// Despite the function's name, this isn't really a direct test of symbolic
-// link status, since EFI doesn't officially support symlinks. It does seem
-// to be a reliable indicator, though. (OTOH, some disk errors might cause a
-// file to fail to open, which would return a false positive -- but as I use
-// this function to exclude symbolic links from the list of boot loaders,
-// that would be fine, since such boot loaders wouldn't work.)
-// CAUTION: *FullName MUST be properly cleaned up (via CleanUpPathNameSlashes())
-static BOOLEAN IsSymbolicLink(REFIT_VOLUME *Volume, CHAR16 *FullName, EFI_FILE_INFO *DirEntry) {
-    EFI_FILE_HANDLE FileHandle;
-    EFI_FILE_INFO   *FileInfo = NULL;
-    EFI_STATUS      Status;
-    UINTN           FileSize2 = 0;
-
-    Status = refit_call5_wrapper(Volume->RootDir->Open, Volume->RootDir, &FileHandle, FullName, EFI_FILE_MODE_READ, 0);
-    if (Status == EFI_SUCCESS) {
-        FileInfo = LibFileInfo(FileHandle);
-        if (FileInfo != NULL)
-            FileSize2 = FileInfo->FileSize;
-    }
-
-    MyFreePool(FileInfo);
-
-    return (DirEntry->FileSize != FileSize2);
-} // BOOLEAN IsSymbolicLink()
-
-// Returns TRUE if a file with the same name as the original but with
-// ".efi.signed" is also present in the same directory. Ubuntu is using
-// this filename as a signed version of the original unsigned kernel, and
-// there's no point in cluttering the display with two kernels that will
-// behave identically on non-SB systems, or when one will fail when SB
-// is active.
-// CAUTION: *FullName MUST be properly cleaned up (via CleanUpPathNameSlashes())
-static BOOLEAN HasSignedCounterpart(IN REFIT_VOLUME *Volume, IN CHAR16 *FullName) {
-    CHAR16 *NewFile = NULL;
-    BOOLEAN retval = FALSE;
-
-    MergeStrings(&NewFile, FullName, 0);
-    MergeStrings(&NewFile, L".efi.signed", 0);
-    if (NewFile != NULL) {
-        if (FileExists(Volume->RootDir, NewFile))
-            retval = TRUE;
-        MyFreePool(NewFile);
-    } // if
-
-    return retval;
-} // BOOLEAN HasSignedCounterpart()
-
-// Scan an individual directory for EFI boot loader files and, if found,
-// add them to the list. Exception: Ignores FALLBACK_FULLNAME, which is picked
-// up in ScanEfiFiles(). Sorts the entries within the loader directory so that
-// the most recent one appears first in the list.
-// Returns TRUE if a duplicate for FALLBACK_FILENAME was found, FALSE if not.
-static BOOLEAN ScanLoaderDir(IN REFIT_VOLUME *Volume, IN CHAR16 *Path, IN CHAR16 *Pattern)
-{
-    EFI_STATUS              Status;
-    REFIT_DIR_ITER          DirIter;
-    EFI_FILE_INFO           *DirEntry;
-    CHAR16                  Message[256], *Extension, *FullName;
-    struct LOADER_LIST      *LoaderList = NULL, *NewLoader;
-    LOADER_ENTRY            *FirstKernel = NULL, *LatestEntry = NULL;
-    BOOLEAN                 FoundFallbackDuplicate = FALSE, IsLinux = FALSE, InSelfPath;
-
-    InSelfPath = MyStriCmp(Path, SelfDirPath);
-    if ((!SelfDirPath || !Path || (InSelfPath && (Volume->DeviceHandle != SelfVolume->DeviceHandle)) ||
-           (!InSelfPath)) && (ShouldScan(Volume, Path))) {
-       // look through contents of the directory
-       DirIterOpen(Volume->RootDir, Path, &DirIter);
-       while (DirIterNext(&DirIter, 2, Pattern, &DirEntry)) {
-          Extension = FindExtension(DirEntry->FileName);
-          FullName = StrDuplicate(Path);
-          MergeStrings(&FullName, DirEntry->FileName, L'\\');
-          CleanUpPathNameSlashes(FullName);
-          if (DirEntry->FileName[0] == '.' ||
-              MyStriCmp(Extension, L".icns") ||
-              MyStriCmp(Extension, L".png") ||
-              (MyStriCmp(DirEntry->FileName, FALLBACK_BASENAME) && (MyStriCmp(Path, L"EFI\\BOOT"))) ||
-              FilenameIn(Volume, Path, DirEntry->FileName, SHELL_NAMES) ||
-              IsSymbolicLink(Volume, FullName, DirEntry) || /* is symbolic link */
-              HasSignedCounterpart(Volume, FullName) || /* a file with same name plus ".efi.signed" is present */
-              FilenameIn(Volume, Path, DirEntry->FileName, GlobalConfig.DontScanFiles) ||
-              !IsValidLoader(Volume->RootDir, FullName)) {
-                continue;   // skip this
-          }
-
-          NewLoader = AllocateZeroPool(sizeof(struct LOADER_LIST));
-          if (NewLoader != NULL) {
-             NewLoader->FileName = StrDuplicate(FullName);
-             NewLoader->TimeStamp = DirEntry->ModificationTime;
-             LoaderList = AddLoaderListEntry(LoaderList, NewLoader);
-             if (DuplicatesFallback(Volume, FullName))
-                FoundFallbackDuplicate = TRUE;
-          } // if
-          MyFreePool(Extension);
-          MyFreePool(FullName);
-       } // while
-
-       NewLoader = LoaderList;
-       while (NewLoader != NULL) {
-           IsLinux = (StriSubCmp(L"bzImage", NewLoader->FileName) ||
-                      StriSubCmp(L"vmlinuz", NewLoader->FileName) ||
-                      StriSubCmp(L"kernel", NewLoader->FileName));
-           if ((FirstKernel != NULL) && IsLinux && GlobalConfig.FoldLinuxKernels) {
-               AddKernelToSubmenu(FirstKernel, NewLoader->FileName, Volume);
-           } else {
-               LatestEntry = AddLoaderEntry(NewLoader->FileName, NULL, Volume, !(IsLinux && GlobalConfig.FoldLinuxKernels));
-               if (IsLinux && (FirstKernel == NULL))
-                   FirstKernel = LatestEntry;
-           }
-           NewLoader = NewLoader->NextEntry;
-       } // while
-       if ((NewLoader != NULL) && (FirstKernel != NULL) && IsLinux && GlobalConfig.FoldLinuxKernels)
-           AddMenuEntry(FirstKernel->me.SubScreen, &MenuEntryReturn);
-
-       CleanUpLoaderList(LoaderList);
-       Status = DirIterClose(&DirIter);
-       // NOTE: EFI_INVALID_PARAMETER really is an error that should be reported;
-       // but I've gotten reports from users who are getting this error occasionally
-       // and I can't find anything wrong or reproduce the problem, so I'm putting
-       // it down to buggy EFI implementations and ignoring that particular error....
-       if ((Status != EFI_NOT_FOUND) && (Status != EFI_INVALID_PARAMETER)) {
-          if (Path)
-             SPrint(Message, 255, L"while scanning the %s directory on %s", Path, Volume->VolName);
-          else
-             SPrint(Message, 255, L"while scanning the root directory on %s", Path, Volume->VolName);
-          CheckError(Status, Message);
-       } // if (Status != EFI_NOT_FOUND)
-    } // if not scanning a blacklisted directory
-
-    return FoundFallbackDuplicate;
-} /* static VOID ScanLoaderDir() */
-
-// Run the IPXE_DISCOVER_NAME program, which obtains the IP address of the boot
-// server and the name of the boot file it delivers.
-CHAR16* RuniPXEDiscover(EFI_HANDLE Volume)
-{
-    EFI_STATUS       Status;
-    EFI_DEVICE_PATH  *FilePath;
-    EFI_HANDLE       iPXEHandle;
-    CHAR16           *boot_info = NULL;
-    UINTN            boot_info_size = 0;
-
-    FilePath = FileDevicePath (Volume, IPXE_DISCOVER_NAME);
-    Status = refit_call6_wrapper(BS->LoadImage, FALSE, SelfImageHandle, FilePath, NULL, 0, &iPXEHandle);
-    if (Status != 0)
-        return NULL;
-
-    Status = refit_call3_wrapper(BS->StartImage, iPXEHandle, &boot_info_size, &boot_info);
-
-    return boot_info;
-} // RuniPXEDiscover()
-
-// Scan for network (PXE) boot servers. This function relies on the presence
-// of the IPXE_DISCOVER_NAME and IPXE_NAME program files on the volume from
-// which rEFInd launched. As of December 6, 2014, these tools aren't entirely
-// reliable. See BUILDING.txt for information on building them.
-static VOID ScanNetboot() {
-    CHAR16        *iPXEFileName = IPXE_NAME;
-    CHAR16        *Location;
-    REFIT_VOLUME  *NetVolume;
-
-    if (FileExists(SelfVolume->RootDir, IPXE_DISCOVER_NAME) &&
-        FileExists(SelfVolume->RootDir, IPXE_NAME) &&
-        IsValidLoader(SelfVolume->RootDir, IPXE_DISCOVER_NAME) &&
-        IsValidLoader(SelfVolume->RootDir, IPXE_NAME)) {
-            Location = RuniPXEDiscover(SelfVolume->DeviceHandle);
-            if (Location != NULL && FileExists(SelfVolume->RootDir, iPXEFileName)) {
-                NetVolume = AllocatePool(sizeof(REFIT_VOLUME));
-                CopyMem(NetVolume, SelfVolume, sizeof(REFIT_VOLUME));
-                NetVolume->DiskKind = DISK_KIND_NET;
-                NetVolume->VolBadgeImage = BuiltinIcon(BUILTIN_ICON_VOL_NET);
-                NetVolume->PartName = NetVolume->VolName = NULL;
-                AddLoaderEntry(iPXEFileName, Location, NetVolume, TRUE);
-                MyFreePool(NetVolume);
-            } // if support files exist and are valid
-    } 
-} // VOID ScanNetBoot()
-
-static VOID ScanEfiFiles(REFIT_VOLUME *Volume) {
-    EFI_STATUS              Status;
-    REFIT_DIR_ITER          EfiDirIter;
-    EFI_FILE_INFO           *EfiDirEntry;
-    CHAR16                  FileName[256], *Directory = NULL, *MatchPatterns, *VolName = NULL, *SelfPath, *Temp;
-    UINTN                   i, Length;
-    BOOLEAN                 ScanFallbackLoader = TRUE;
-    BOOLEAN                 FoundBRBackup = FALSE;
-
-    if (Volume && (Volume->RootDir != NULL) && (Volume->VolName != NULL) && (Volume->IsReadable)) {
-        MatchPatterns = StrDuplicate(LOADER_MATCH_PATTERNS);
-        if (GlobalConfig.ScanAllLinux)
-            MergeStrings(&MatchPatterns, LINUX_MATCH_PATTERNS, L',');
-
-        // check for macOS boot loader
-        if (ShouldScan(Volume, MACOSX_LOADER_DIR)) {
-            StrCpy(FileName, MACOSX_LOADER_PATH);
-            if (FileExists(Volume->RootDir, FileName) && !FilenameIn(Volume, MACOSX_LOADER_DIR, L"boot.efi", GlobalConfig.DontScanFiles)) {
-                AddLoaderEntry(FileName, L"macOS", Volume, TRUE);
-                if (DuplicatesFallback(Volume, FileName))
-                    ScanFallbackLoader = FALSE;
-            }
-
-            // check for XOM
-            StrCpy(FileName, L"System\\Library\\CoreServices\\xom.efi");
-            if (FileExists(Volume->RootDir, FileName) && !FilenameIn(Volume, MACOSX_LOADER_DIR, L"xom.efi", GlobalConfig.DontScanFiles)) {
-                AddLoaderEntry(FileName, L"Windows XP (XoM)", Volume, TRUE);
-                if (DuplicatesFallback(Volume, FileName))
-                    ScanFallbackLoader = FALSE;
-            }
-        } // if should scan Mac directory
-
-        // check for Microsoft boot loader/menu
-        if (ShouldScan(Volume, L"EFI\\Microsoft\\Boot")) {
-            StrCpy(FileName, L"EFI\\Microsoft\\Boot\\bkpbootmgfw.efi");
-            if (FileExists(Volume->RootDir, FileName) &&  !FilenameIn(Volume, L"EFI\\Microsoft\\Boot", L"bkpbootmgfw.efi",
-                GlobalConfig.DontScanFiles)) {
-                    AddLoaderEntry(FileName, L"Microsoft EFI boot (Boot Repair backup)", Volume, TRUE);
-                    FoundBRBackup = TRUE;
-                    if (DuplicatesFallback(Volume, FileName))
-                        ScanFallbackLoader = FALSE;
-            }
-            StrCpy(FileName, L"EFI\\Microsoft\\Boot\\bootmgfw.efi");
-            if (FileExists(Volume->RootDir, FileName) &&
-                !FilenameIn(Volume, L"EFI\\Microsoft\\Boot", L"bootmgfw.efi", GlobalConfig.DontScanFiles)) {
-                    if (FoundBRBackup)
-                        AddLoaderEntry(FileName, L"Supposed Microsoft EFI boot (probably GRUB)", Volume, TRUE);
-                    else
-                        AddLoaderEntry(FileName, L"Microsoft EFI boot", Volume, TRUE);
-                    if (DuplicatesFallback(Volume, FileName))
-                        ScanFallbackLoader = FALSE;
-            }
-        } // if
-
-        // scan the root directory for EFI executables
-        if (ScanLoaderDir(Volume, L"\\", MatchPatterns))
-            ScanFallbackLoader = FALSE;
-
-        // scan subdirectories of the EFI directory (as per the standard)
-        DirIterOpen(Volume->RootDir, L"EFI", &EfiDirIter);
-        while (DirIterNext(&EfiDirIter, 1, NULL, &EfiDirEntry)) {
-            if (MyStriCmp(EfiDirEntry->FileName, L"tools") || EfiDirEntry->FileName[0] == '.')
-                continue;   // skip this, doesn't contain boot loaders or is scanned later
-            SPrint(FileName, 255, L"EFI\\%s", EfiDirEntry->FileName);
-            if (ScanLoaderDir(Volume, FileName, MatchPatterns))
-                ScanFallbackLoader = FALSE;
-        } // while()
-        Status = DirIterClose(&EfiDirIter);
-        if ((Status != EFI_NOT_FOUND) && (Status != EFI_INVALID_PARAMETER)) {
-            Temp = PoolPrint(L"while scanning the EFI directory on %s", Volume->VolName);
-            CheckError(Status, Temp);
-            MyFreePool(Temp);
-        } // if
-
-        // Scan user-specified (or additional default) directories....
-        i = 0;
-        while ((Directory = FindCommaDelimited(GlobalConfig.AlsoScan, i++)) != NULL) {
-            if (ShouldScan(Volume, Directory)) {
-                SplitVolumeAndFilename(&Directory, &VolName);
-                CleanUpPathNameSlashes(Directory);
-                Length = StrLen(Directory);
-                if ((Length > 0) && ScanLoaderDir(Volume, Directory, MatchPatterns))
-                    ScanFallbackLoader = FALSE;
-                MyFreePool(VolName);
-            } // if should scan dir
-            MyFreePool(Directory);
-        } // while
-
-        // Don't scan the fallback loader if it's on the same volume and a duplicate of rEFInd itself....
-        SelfPath = DevicePathToStr(SelfLoadedImage->FilePath);
-        CleanUpPathNameSlashes(SelfPath);
-        if ((Volume->DeviceHandle == SelfLoadedImage->DeviceHandle) && DuplicatesFallback(Volume, SelfPath))
-            ScanFallbackLoader = FALSE;
-
-        // If not a duplicate & if it exists & if it's not us, create an entry
-        // for the fallback boot loader
-        if (ScanFallbackLoader && FileExists(Volume->RootDir, FALLBACK_FULLNAME) && ShouldScan(Volume, L"EFI\\BOOT") &&
-            !FilenameIn(Volume, L"EFI\\BOOT", FALLBACK_BASENAME, GlobalConfig.DontScanFiles)) {
-                AddLoaderEntry(FALLBACK_FULLNAME, L"Fallback boot loader", Volume, TRUE);
-        }
-    } // if
-} // static VOID ScanEfiFiles()
-
-// Scan internal disks for valid EFI boot loaders....
-static VOID ScanInternal(VOID) {
-    UINTN                   VolumeIndex;
-
-    for (VolumeIndex = 0; VolumeIndex < VolumesCount; VolumeIndex++) {
-        if (Volumes[VolumeIndex]->DiskKind == DISK_KIND_INTERNAL) {
-            ScanEfiFiles(Volumes[VolumeIndex]);
-        }
-    } // for
-} // static VOID ScanInternal()
-
-// Scan external disks for valid EFI boot loaders....
-static VOID ScanExternal(VOID) {
-    UINTN                   VolumeIndex;
-
-    for (VolumeIndex = 0; VolumeIndex < VolumesCount; VolumeIndex++) {
-        if (Volumes[VolumeIndex]->DiskKind == DISK_KIND_EXTERNAL) {
-            ScanEfiFiles(Volumes[VolumeIndex]);
-        }
-    } // for
-} // static VOID ScanExternal()
-
-// Scan internal disks for valid EFI boot loaders....
-static VOID ScanOptical(VOID) {
-    UINTN                   VolumeIndex;
-
-    for (VolumeIndex = 0; VolumeIndex < VolumesCount; VolumeIndex++) {
-        if (Volumes[VolumeIndex]->DiskKind == DISK_KIND_OPTICAL) {
-            ScanEfiFiles(Volumes[VolumeIndex]);
-        }
-    } // for
-} // static VOID ScanOptical()
-
-// default volume badge icon based on disk kind
-EG_IMAGE * GetDiskBadge(IN UINTN DiskType) {
-    EG_IMAGE * Badge = NULL;
-
-    switch (DiskType) {
-        case BBS_HARDDISK:
-            Badge = BuiltinIcon(BUILTIN_ICON_VOL_INTERNAL);
-            break;
-        case BBS_USB:
-            Badge = BuiltinIcon(BUILTIN_ICON_VOL_EXTERNAL);
-            break;
-        case BBS_CDROM:
-            Badge = BuiltinIcon(BUILTIN_ICON_VOL_OPTICAL);
-            break;
-    } // switch()
-    return Badge;
-} // EG_IMAGE * GetDiskBadge()
-
-//
-// pre-boot tool functions
-//
-
-static VOID StartTool(IN LOADER_ENTRY *Entry)
-{
-    BeginExternalScreen(Entry->UseGraphicsMode, Entry->me.Title + 6);  // assumes "Start <title>" as assigned below
-    StoreLoaderName(Entry->me.Title);
-    StartEFIImage(Entry->DevicePath, Entry->LoadOptions, TYPE_EFI,
-                  Basename(Entry->LoaderPath), Entry->OSType, NULL, TRUE, FALSE);
-    FinishExternalScreen();
-} /* static VOID StartTool() */
-
-static LOADER_ENTRY * AddToolEntry(EFI_HANDLE DeviceHandle, IN CHAR16 *LoaderPath, IN CHAR16 *LoaderTitle, IN EG_IMAGE *Image,
-                                   IN CHAR16 ShortcutLetter, IN BOOLEAN UseGraphicsMode)
-{
-    LOADER_ENTRY *Entry;
-    CHAR16       *TitleStr = NULL;
-
-    Entry = AllocateZeroPool(sizeof(LOADER_ENTRY));
-
-    TitleStr = PoolPrint(L"Start %s", LoaderTitle);
-    Entry->me.Title = TitleStr;
-    Entry->me.Tag = TAG_TOOL;
-    Entry->me.Row = 1;
-    Entry->me.ShortcutLetter = ShortcutLetter;
-    Entry->me.Image = Image;
-    Entry->LoaderPath = (LoaderPath) ? StrDuplicate(LoaderPath) : NULL;
-    Entry->DevicePath = FileDevicePath(DeviceHandle, Entry->LoaderPath);
-    Entry->UseGraphicsMode = UseGraphicsMode;
-
-    AddMenuEntry(&MainMenu, (REFIT_MENU_ENTRY *)Entry);
-    return Entry;
-} /* static LOADER_ENTRY * AddToolEntry() */
-
-// Locates boot loaders. NOTE: This assumes that GlobalConfig.LegacyType is set correctly.
-static VOID ScanForBootloaders(BOOLEAN ShowMessage) {
-    UINTN    i;
-    CHAR8    s;
-    BOOLEAN  ScanForLegacy = FALSE;
-    EG_PIXEL BGColor = COLOR_LIGHTBLUE;
-    CHAR16   *HiddenTags;
-
-    if (ShowMessage)
-        egDisplayMessage(L"Scanning for boot loaders; please wait....", &BGColor, CENTER);
-
-    // Determine up-front if we'll be scanning for legacy loaders....
-    for (i = 0; i < NUM_SCAN_OPTIONS; i++) {
-        s = GlobalConfig.ScanFor[i];
-        if ((s == 'c') || (s == 'C') || (s == 'h') || (s == 'H') || (s == 'b') || (s == 'B'))
-            ScanForLegacy = TRUE;
-    } // for
-
-    // If UEFI & scanning for legacy loaders & deep legacy scan, update NVRAM boot manager list
-    if ((GlobalConfig.LegacyType == LEGACY_TYPE_UEFI) && ScanForLegacy && GlobalConfig.DeepLegacyScan) {
-        BdsDeleteAllInvalidLegacyBootOptions();
-        BdsAddNonExistingLegacyBootOptions();
-    } // if
-
-    HiddenTags = ReadHiddenTags(L"HiddenTags");
-    if ((HiddenTags) && (StrLen(HiddenTags) > 0)) {
-        MergeStrings(&GlobalConfig.DontScanFiles, HiddenTags, L',');
-    }
-    HiddenTags = ReadHiddenTags(L"HiddenLegacy");
-    if ((HiddenTags) && (StrLen(HiddenTags) > 0)) {
-        MergeStrings(&GlobalConfig.DontScanVolumes, HiddenTags, L',');
-    }
-    MyFreePool(HiddenTags);
-
-    // scan for loaders and tools, add them to the menu
-    for (i = 0; i < NUM_SCAN_OPTIONS; i++) {
-        switch(GlobalConfig.ScanFor[i]) {
-            case 'c': case 'C':
-                ScanLegacyDisc();
-                break;
-            case 'h': case 'H':
-                ScanLegacyInternal();
-                break;
-            case 'b': case 'B':
-                ScanLegacyExternal();
-                break;
-            case 'm': case 'M':
-                ScanUserConfigured(GlobalConfig.ConfigFilename);
-                break;
-            case 'e': case 'E':
-                ScanExternal();
-                break;
-            case 'i': case 'I':
-                ScanInternal();
-                break;
-            case 'o': case 'O':
-                ScanOptical();
-                break;
-            case 'n': case 'N':
-                ScanNetboot();
-                break;
-        } // switch()
-    } // for
-
-    // assign shortcut keys
-    for (i = 0; i < MainMenu.EntryCount && MainMenu.Entries[i]->Row == 0 && i < 9; i++)
-        MainMenu.Entries[i]->ShortcutDigit = (CHAR16)('1' + i);
-
-    // wait for user ACK when there were errors
-    FinishTextScreen(FALSE);
-} // static VOID ScanForBootloaders()
-
-// Checks to see if a specified file seems to be a valid tool.
-// Returns TRUE if it passes all tests, FALSE otherwise
-static BOOLEAN IsValidTool(IN REFIT_VOLUME *BaseVolume, CHAR16 *PathName) {
-    CHAR16 *DontVolName = NULL, *DontPathName = NULL, *DontFileName = NULL, *DontScanThis;
-    CHAR16 *TestVolName = NULL, *TestPathName = NULL, *TestFileName = NULL;
-    BOOLEAN retval = TRUE;
-    UINTN i = 0;
-
-    if (FileExists(BaseVolume->RootDir, PathName) && IsValidLoader(BaseVolume->RootDir, PathName)) {
-        SplitPathName(PathName, &TestVolName, &TestPathName, &TestFileName);
-        while (retval && (DontScanThis = FindCommaDelimited(GlobalConfig.DontScanTools, i++))) {
-            SplitPathName(DontScanThis, &DontVolName, &DontPathName, &DontFileName);
-            if (MyStriCmp(TestFileName, DontFileName) &&
-                ((DontPathName == NULL) || (MyStriCmp(TestPathName, DontPathName))) &&
-                ((DontVolName == NULL) || (VolumeMatchesDescription(BaseVolume, DontVolName)))) {
-                retval = FALSE;
-            } // if
-        } // while
-    } else
-        retval = FALSE;
-    MyFreePool(TestVolName);
-    MyFreePool(TestPathName);
-    MyFreePool(TestFileName);
-    return retval;
-} // VOID IsValidTool()
-
-// Locate a single tool from the specified Locations using one of the
-// specified Names and add it to the menu.
-static VOID FindTool(CHAR16 *Locations, CHAR16 *Names, CHAR16 *Description, UINTN Icon) {
-    UINTN j = 0, k, VolumeIndex;
-    CHAR16 *DirName, *FileName, *PathName, FullDescription[256];
-
-    while ((DirName = FindCommaDelimited(Locations, j++)) != NULL) {
-        k = 0;
-        while ((FileName = FindCommaDelimited(Names, k++)) != NULL) {
-            PathName = StrDuplicate(DirName);
-            MergeStrings(&PathName, FileName, MyStriCmp(PathName, L"\\") ? 0 : L'\\');
-            for (VolumeIndex = 0; VolumeIndex < VolumesCount; VolumeIndex++) {
-                if ((Volumes[VolumeIndex]->RootDir != NULL) && (IsValidTool(Volumes[VolumeIndex], PathName))) {
-                    SPrint(FullDescription, 255, L"%s at %s on %s", Description, PathName, Volumes[VolumeIndex]->VolName);
-                    AddToolEntry(Volumes[VolumeIndex]->DeviceHandle, PathName, FullDescription, BuiltinIcon(Icon), 'S', FALSE);
-                } // if
-            } // for
-            MyFreePool(PathName);
-            MyFreePool(FileName);
-        } // while Names
-        MyFreePool(DirName);
-    } // while Locations
-} // VOID FindTool()
-
-// Add the second-row tags containing built-in and external tools (EFI shell,
-// reboot, etc.)
-static VOID ScanForTools(VOID) {
-    CHAR16 *FileName = NULL, *VolName = NULL, *MokLocations, Description[256], *HiddenTools;
-    REFIT_MENU_ENTRY *TempMenuEntry;
-    UINTN i, j, VolumeIndex;
-    UINT64 osind;
-    CHAR8 *b = 0;
-    UINT32 CsrValue;
-
-    MokLocations = StrDuplicate(MOK_LOCATIONS);
-    if (MokLocations != NULL)
-        MergeStrings(&MokLocations, SelfDirPath, L',');
-
-    HiddenTools = ReadHiddenTags(L"HiddenTools");
-    if ((HiddenTools) && (StrLen(HiddenTools) > 0)) {
-        MergeStrings(&GlobalConfig.DontScanTools, HiddenTools, L',');
-    }
-    MyFreePool(HiddenTools);
-
-    for (i = 0; i < NUM_TOOLS; i++) {
-        switch(GlobalConfig.ShowTools[i]) {
-            // NOTE: Be sure that FileName is NULL at the end of each case.
-            case TAG_SHUTDOWN:
-                TempMenuEntry = CopyMenuEntry(&MenuEntryShutdown);
-                TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_SHUTDOWN);
-                AddMenuEntry(&MainMenu, TempMenuEntry);
-                break;
-
-            case TAG_REBOOT:
-                TempMenuEntry = CopyMenuEntry(&MenuEntryReset);
-                TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_RESET);
-                AddMenuEntry(&MainMenu, TempMenuEntry);
-                break;
-
-            case TAG_ABOUT:
-                TempMenuEntry = CopyMenuEntry(&MenuEntryAbout);
-                TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_ABOUT);
-                AddMenuEntry(&MainMenu, TempMenuEntry);
-                break;
-
-            case TAG_EXIT:
-                TempMenuEntry = CopyMenuEntry(&MenuEntryExit);
-                TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_EXIT);
-                AddMenuEntry(&MainMenu, TempMenuEntry);
-                break;
-
-            case TAG_HIDDEN:
-                if (GlobalConfig.HiddenTags) {
-                    TempMenuEntry = CopyMenuEntry(&MenuEntryManageHidden);
-                    TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_HIDDEN);
-                    AddMenuEntry(&MainMenu, TempMenuEntry);
-                }
-                break;
-
-            case TAG_FIRMWARE:
-                if (EfivarGetRaw(&GlobalGuid, L"OsIndicationsSupported", &b, &j) == EFI_SUCCESS) {
-                    osind = (UINT64)*b;
-                    if (osind & EFI_OS_INDICATIONS_BOOT_TO_FW_UI) {
-                        TempMenuEntry = CopyMenuEntry(&MenuEntryFirmware);
-                        TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_FIRMWARE);
-                        AddMenuEntry(&MainMenu, TempMenuEntry);
-                    } // if
-                } // if
-                break;
-
-            case TAG_SHELL:
-                j = 0;
-                while ((FileName = FindCommaDelimited(SHELL_NAMES, j++)) != NULL) {
-                    if (IsValidTool(SelfVolume, FileName)) {
-                        AddToolEntry(SelfLoadedImage->DeviceHandle, FileName, L"EFI Shell", BuiltinIcon(BUILTIN_ICON_TOOL_SHELL),
-                                     'S', FALSE);
-                    }
-                MyFreePool(FileName);
-                } // while
-                break;
-
-            case TAG_GPTSYNC:
-                j = 0;
-                while ((FileName = FindCommaDelimited(GPTSYNC_NAMES, j++)) != NULL) {
-                    if (IsValidTool(SelfVolume, FileName)) {
-                        AddToolEntry(SelfLoadedImage->DeviceHandle, FileName, L"Hybrid MBR tool", BuiltinIcon(BUILTIN_ICON_TOOL_PART),
-                                     'P', FALSE);
-                    } // if
-                    MyFreePool(FileName);
-                } // while
-                FileName = NULL;
-                break;
-
-            case TAG_GDISK:
-                j = 0;
-                while ((FileName = FindCommaDelimited(GDISK_NAMES, j++)) != NULL) {
-                    if (IsValidTool(SelfVolume, FileName)) {
-                        AddToolEntry(SelfLoadedImage->DeviceHandle, FileName, L"disk partitioning tool",
-                                     BuiltinIcon(BUILTIN_ICON_TOOL_PART), 'G', FALSE);
-                    } // if
-                    MyFreePool(FileName);
-                } // while
-                FileName = NULL;
-                break;
-            
-            case TAG_NETBOOT:
-                j = 0;
-                while ((FileName = FindCommaDelimited(NETBOOT_NAMES, j++)) != NULL) {
-                    if (IsValidTool(SelfVolume, FileName)) {
-                        AddToolEntry(SelfLoadedImage->DeviceHandle, FileName, L"Netboot",
-                                     BuiltinIcon(BUILTIN_ICON_TOOL_NETBOOT), 'N', FALSE);
-                    } // if
-                    MyFreePool(FileName);
-                } // while
-                FileName = NULL;
-                break;
-
-            case TAG_APPLE_RECOVERY:
-                FileName = StrDuplicate(L"\\com.apple.recovery.boot\\boot.efi");
-                for (VolumeIndex = 0; VolumeIndex < VolumesCount; VolumeIndex++) {
-                    if ((Volumes[VolumeIndex]->RootDir != NULL) && (IsValidTool(SelfVolume, FileName))) {
-                        SPrint(Description, 255, L"Apple Recovery on %s", Volumes[VolumeIndex]->VolName);
-                        AddToolEntry(Volumes[VolumeIndex]->DeviceHandle, FileName, Description,
-                                        BuiltinIcon(BUILTIN_ICON_TOOL_APPLE_RESCUE), 'R', TRUE);
-                    } // if
-                } // for
-                MyFreePool(FileName);
-                FileName = NULL;
-                break;
-
-            case TAG_WINDOWS_RECOVERY:
-                j = 0;
-                while ((FileName = FindCommaDelimited(GlobalConfig.WindowsRecoveryFiles, j++)) != NULL) {
-                    SplitVolumeAndFilename(&FileName, &VolName);
-                    for (VolumeIndex = 0; VolumeIndex < VolumesCount; VolumeIndex++) {
-                        if ((Volumes[VolumeIndex]->RootDir != NULL) &&
-                            (IsValidTool(SelfVolume, FileName)) &&
-                            ((VolName == NULL) || MyStriCmp(VolName, Volumes[VolumeIndex]->VolName))) {
-                                SPrint(Description, 255, L"Microsoft Recovery on %s", Volumes[VolumeIndex]->VolName);
-                                AddToolEntry(Volumes[VolumeIndex]->DeviceHandle, FileName, Description,
-                                             BuiltinIcon(BUILTIN_ICON_TOOL_WINDOWS_RESCUE), 'R', TRUE);
-                        } // if
-                    } // for
-                } // while
-                MyFreePool(FileName);
-                FileName = NULL;
-                MyFreePool(VolName);
-                VolName = NULL;
-                break;
-
-            case TAG_MOK_TOOL:
-                FindTool(MokLocations, MOK_NAMES, L"MOK utility", BUILTIN_ICON_TOOL_MOK_TOOL);
-                break;
-
-            case TAG_FWUPDATE_TOOL:
-                FindTool(MokLocations, FWUPDATE_NAMES, L"firmware update utility", BUILTIN_ICON_TOOL_FWUPDATE);
-                break;
-
-            case TAG_CSR_ROTATE:
-                if ((GetCsrStatus(&CsrValue) == EFI_SUCCESS) && (GlobalConfig.CsrValues)) {
-                    TempMenuEntry = CopyMenuEntry(&MenuEntryRotateCsr);
-                    TempMenuEntry->Image = BuiltinIcon(BUILTIN_ICON_FUNC_CSR_ROTATE);
-                    AddMenuEntry(&MainMenu, TempMenuEntry);
-                } // if
-                break;
-
-            case TAG_MEMTEST:
-                FindTool(MEMTEST_LOCATIONS, MEMTEST_NAMES, L"Memory test utility", BUILTIN_ICON_TOOL_MEMTEST);
-                break;
-
-        } // switch()
-    } // for
-} // static VOID ScanForTools
-
 // Rescan for boot loaders
-VOID RescanAll(BOOLEAN DisplayMessage) {
+VOID RescanAll(BOOLEAN DisplayMessage, BOOLEAN Reconnect) {
+    LOG(1, LOG_LINE_NORMAL, L"Re-scanning all boot loaders");
     FreeList((VOID ***) &(MainMenu.Entries), &MainMenu.EntryCount);
     MainMenu.Entries = NULL;
     MainMenu.EntryCount = 0;
-    ConnectAllDriversToAllControllers();
-    ScanVolumes();
+    // ConnectAllDriversToAllControllers() can cause system hangs with some
+    // buggy filesystem drivers, so do it only if necessary....
+    if (Reconnect) {
+        ConnectAllDriversToAllControllers();
+        ScanVolumes();
+    }
     ReadConfig(GlobalConfig.ConfigFilename);
     SetVolumeIcons();
-    ScanForBootloaders(TRUE);
+    ScanForBootloaders(DisplayMessage);
     ScanForTools();
 } // VOID RescanAll()
 
@@ -2111,7 +259,9 @@
     EFI_STATUS Status;
     BOOLEAN    Success = FALSE;
 
+    LOG(1, LOG_LINE_NORMAL, L"Setting up Secure Boot (if applicable)");
     if (secure_mode() && ShimLoaded()) {
+        LOG(2, LOG_LINE_NORMAL, L"Secure boot mode detected with loaded Shim; adding MOK extensions");
         Status = security_policy_install();
         if (Status == EFI_SUCCESS) {
             Success = TRUE;
@@ -2119,6 +269,8 @@
             Print(L"Failed to install MOK Secure Boot extensions");
             PauseForKey();
         }
+    } else {
+        LOG(2, LOG_LINE_NORMAL, L"Secure boot disabled; doing nothing");
     }
     return Success;
 } // VOID SecureBootSetup()
@@ -2171,6 +323,120 @@
     } // if
 } // VOID SetConfigFilename()
 
+// Adjust the GlobalConfig.DefaultSelection variable: Replace all "+" elements with the
+// rEFInd PreviousBoot variable, if it's available. If it's not available, delete that
+// element.
+static VOID AdjustDefaultSelection() {
+    UINTN i = 0, j;
+    CHAR16 *Element = NULL, *NewCommaDelimited = NULL, *PreviousBoot = NULL;
+    EFI_STATUS Status;
+
+    LOG(1, LOG_LINE_NORMAL, L"Adjusting default_selection with PreviousBoot values");
+    while ((Element = FindCommaDelimited(GlobalConfig.DefaultSelection, i++)) != NULL) {
+        if (MyStriCmp(Element, L"+")) {
+            Status = EfivarGetRaw(&RefindGuid, L"PreviousBoot", (CHAR8 **) &PreviousBoot, &j);
+            if (Status == EFI_SUCCESS) {
+                MyFreePool(Element);
+                Element = PreviousBoot;
+            } else {
+                Element = NULL;
+            }
+        } // if
+        if (Element && StrLen(Element)) {
+            MergeStrings(&NewCommaDelimited, Element, L',');
+        } // if
+        MyFreePool(Element);
+    } // while
+    MyFreePool(GlobalConfig.DefaultSelection);
+    GlobalConfig.DefaultSelection = NewCommaDelimited;
+} // AdjustDefaultSelection()
+
+// Log basic information (rEFInd version, EFI version, etc.) to the log file.
+VOID LogBasicInfo(VOID) {
+    EFI_STATUS Status;
+    UINT64     MaximumVariableStorageSize;
+    UINT64     RemainingVariableStorageSize;
+    UINT64     MaximumVariableSize;
+    UINTN      EfiMajorVersion = ST->Hdr.Revision >> 16;
+    CHAR16     *TempStr;
+    EFI_GUID   ConsoleControlProtocolGuid = EFI_CONSOLE_CONTROL_PROTOCOL_GUID;
+    EFI_GUID   UgaDrawProtocolGuid = EFI_UGA_DRAW_PROTOCOL_GUID;
+    EFI_GUID   GraphicsOutputProtocolGuid = EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID;
+
+    LOG(1, LOG_LINE_SEPARATOR, L"System information");
+#if defined(__MAKEWITH_GNUEFI)
+    LOG(1, LOG_LINE_NORMAL, L"rEFInd %s built with GNU-EFI", REFIND_VERSION);
+#else
+    LOG(1, LOG_LINE_NORMAL, L"rEFInd %s built with TianoCore EDK2", REFIND_VERSION);
+#endif
+    TempStr = GuidAsString(&(SelfVolume->PartGuid));
+    LOG(1, LOG_LINE_NORMAL, L"rEFInd boot partition GUID: %s", TempStr);
+    MyFreePool(TempStr);
+#if defined(EFI32)
+    LOG(1, LOG_LINE_NORMAL, L"Platform: x86/IA32/i386 (32-bit)");
+#elif defined(EFIX64)
+    LOG(1, LOG_LINE_NORMAL, L"Platform: x86-64/X64/AMD64 (64-bit)");
+#elif defined(EFIAARCH64)
+    LOG(1, LOG_LINE_NORMAL, L"Platform: ARM64/AARCH64 (64-bit)");
+#else
+    LOG(1, LOG_LINE_NORMAL, L"Platform: unknown");
+#endif
+    LOG(1, LOG_LINE_NORMAL, L"Log level is %d", GlobalConfig.LogLevel);
+    LOG(1, LOG_LINE_NORMAL, L"Menu timeout is %d", GlobalConfig.Timeout);
+    LOG(1, LOG_LINE_NORMAL, L"Firmware: %s %d.%02d", ST->FirmwareVendor,
+        ST->FirmwareRevision >> 16, ST->FirmwareRevision & ((1 << 16) - 1));
+    LOG(1, LOG_LINE_NORMAL, L"EFI Revision %d.%02d", EfiMajorVersion,
+        ST->Hdr.Revision & ((1 << 16) - 1));
+    LOG(1, LOG_LINE_NORMAL, L"Secure Boot %s", secure_mode() ? L"active" : L"inactive");
+    LOG(1, LOG_LINE_NORMAL, L"Shim is%s available", ShimLoaded() ? L"" : L" not");
+    switch (GlobalConfig.LegacyType) {
+        case LEGACY_TYPE_MAC:
+            TempStr = L"CSM type: Mac";
+            break;
+        case LEGACY_TYPE_UEFI:
+            TempStr = L"CSM type: UEFI";
+            break;
+        case LEGACY_TYPE_NONE:
+            TempStr = L"CSM is not available";
+            break;
+        default: // should never happen; just in case....
+            TempStr = L"CSM type: unknown";
+            break;
+    }
+    LOG(1, LOG_LINE_NORMAL, TempStr);
+    if (EfiMajorVersion > 1) { // QueryVariableInfo() is not supported in EFI 1.x
+        LOG(3, LOG_LINE_NORMAL, L"Trying to get variable info....");
+        Status = refit_call4_wrapper(RT->QueryVariableInfo, EFI_VARIABLE_NON_VOLATILE,
+                                     &MaximumVariableStorageSize, &RemainingVariableStorageSize,
+                                     &MaximumVariableSize);
+        if (EFI_ERROR(Status)) {
+            LOG(1, LOG_LINE_NORMAL, L"Error %d; Unable to retrieve EFI variable capacity", Status);
+        } else {
+            LOG(1, LOG_LINE_NORMAL, L"EFI non-volatile storage:");
+            LOG(1, LOG_LINE_NORMAL, L"   Total storage: %ld", MaximumVariableStorageSize);
+            LOG(1, LOG_LINE_NORMAL, L"   Remaining available: %ld", RemainingVariableStorageSize);
+            LOG(1, LOG_LINE_NORMAL, L"   Maximum variable size: %ld", MaximumVariableSize);
+        }
+    } else {
+        LOG(1, LOG_LINE_NORMAL, L"EFI 1.x; EFI non-volatile storage information is unavailable");
+    }
+
+    // Report which video output devices are available. We don't actually
+    // use them, so just use TempStr as a throwaway pointer to the protocol.
+    Status = LibLocateProtocol(&ConsoleControlProtocolGuid, (VOID **) &TempStr);
+    LOG(1, LOG_LINE_NORMAL, L"System does%s support text mode",
+        EFI_ERROR(Status) ? L" not" : L"");
+
+    Status = LibLocateProtocol(&UgaDrawProtocolGuid, (VOID **) &TempStr);
+    LOG(1, LOG_LINE_NORMAL, L"System does%s support UGA Draw graphics mode",
+        EFI_ERROR(Status) ? L" not" : L"");
+
+    Status = LibLocateProtocol(&GraphicsOutputProtocolGuid, (VOID **) &TempStr);
+    LOG(1, LOG_LINE_NORMAL, L"System does%s support GOP graphics mode",
+        EFI_ERROR(Status) ? L" not" : L"");
+
+} // VOID LogBasicInfo()
+
 //
 // main entry point
 //
@@ -2182,7 +448,7 @@
     BOOLEAN            MainLoopRunning = TRUE;
     BOOLEAN            MokProtocol;
     REFIT_MENU_ENTRY   *ChosenEntry;
-    UINTN              MenuExit, i;
+    UINTN              MenuExit = MENU_EXIT_ENTER, i;
     CHAR16             *SelectionName = NULL;
     EG_PIXEL           BGColor = COLOR_LIGHTBLUE;
 
@@ -2193,16 +459,28 @@
         return Status;
 
     // read configuration
-    CopyMem(GlobalConfig.ScanFor, "ieom      ", NUM_SCAN_OPTIONS);
+    CopyMem(GlobalConfig.ScanFor, "ieom       ", NUM_SCAN_OPTIONS);
     FindLegacyBootType();
     if (GlobalConfig.LegacyType == LEGACY_TYPE_MAC)
-       CopyMem(GlobalConfig.ScanFor, "ihebocm   ", NUM_SCAN_OPTIONS);
+       CopyMem(GlobalConfig.ScanFor, "ihebocm    ", NUM_SCAN_OPTIONS);
     SetConfigFilename(ImageHandle);
-    MokProtocol = SecureBootSetup();
-    LoadDrivers();
-    ScanVolumes(); // Do before ReadConfig() because it needs SelfVolume->VolName
+
+    // Scan volumes first to find SelfVolume, which is needed by LoadDrivers()
+    // and ReadConfig(); however, if drivers are loaded, a second call to
+    // ScanVolumes() is needed to register the new filesystem(s) accessed
+    // by the drivers.
+    ScanVolumes();
     ReadConfig(GlobalConfig.ConfigFilename);
-    SetVolumeIcons();
+    if (GlobalConfig.LogLevel > 0) {
+        StartLogging(FALSE);
+        LogBasicInfo();
+    }
+    MokProtocol = SecureBootSetup();
+    if (LoadDrivers())
+        ScanVolumes();
+
+    LOG(1, LOG_LINE_SEPARATOR, L"Initializing basic features");
+    AdjustDefaultSelection();
 
     if (GlobalConfig.SpoofOSXVersion && GlobalConfig.SpoofOSXVersion[0] != L'\0')
         SetAppleOSInfo();
@@ -2212,53 +490,66 @@
     MainMenu.TimeoutSeconds = GlobalConfig.Timeout;
 
     // disable EFI watchdog timer
+    LOG(1, LOG_LINE_NORMAL, L"Setting watchdog timer");
     refit_call4_wrapper(BS->SetWatchdogTimer, 0x0000, 0x0000, 0x0000, NULL);
 
     // further bootstrap (now with config available)
     SetupScreen();
-<<<<<<< HEAD
-    ScanForBootloaders(GlobalConfig.ScanDelay == 0);
+    SetVolumeIcons();
+    ScanForBootloaders(FALSE);
     ScanForTools();
+
     // SetupScreen() clears the screen; but ScanForBootloaders() may display a
     // message that must be deleted, so do so
     BltClearScreen(TRUE);
-=======
     pdInitialize();
->>>>>>> d63734581c19715b3dc13ab89c520def8d5c4566
 
     if (GlobalConfig.ScanDelay > 0) {
-       if (GlobalConfig.ScanDelay > 1)
+       if (GlobalConfig.ScanDelay > 1) {
+          LOG(1, LOG_LINE_NORMAL, L"Pausing before re-scan");
           egDisplayMessage(L"Pausing before disk scan; please wait....", &BGColor, CENTER);
+       }
        for (i = 0; i < GlobalConfig.ScanDelay; i++)
           refit_call1_wrapper(BS->Stall, 1000000);
+       RescanAll(GlobalConfig.ScanDelay > 1, TRUE);
        BltClearScreen(TRUE);
-       RescanAll(GlobalConfig.ScanDelay > 1);
     } // if
 
     if (GlobalConfig.DefaultSelection)
        SelectionName = StrDuplicate(GlobalConfig.DefaultSelection);
+    if (GlobalConfig.ShutdownAfterTimeout)
+        MainMenu.TimeoutText = L"Shutdown";
 
+    LOG(1, LOG_LINE_SEPARATOR, L"Entering main loop");
     while (MainLoopRunning) {
         MenuExit = RunMainMenu(&MainMenu, &SelectionName, &ChosenEntry);
 
         // The Escape key triggers a re-scan operation....
         if (MenuExit == MENU_EXIT_ESCAPE) {
             MenuExit = 0;
-            RescanAll(TRUE);
+            RescanAll(TRUE, TRUE);
             continue;
         }
 
+        if ((MenuExit == MENU_EXIT_TIMEOUT) && GlobalConfig.ShutdownAfterTimeout) {
+            ChosenEntry->Tag = TAG_SHUTDOWN;
+        }
+
         switch (ChosenEntry->Tag) {
 
             case TAG_REBOOT:    // Reboot
                 TerminateScreen();
+                LOG(1, LOG_LINE_SEPARATOR, L"Rebooting system");
                 refit_call4_wrapper(RT->ResetSystem, EfiResetCold, EFI_SUCCESS, 0, NULL);
+                LOG(1, LOG_LINE_NORMAL, L"Reboot FAILED!");
                 MainLoopRunning = FALSE;   // just in case we get this far
                 break;
 
             case TAG_SHUTDOWN: // Shut Down
                 TerminateScreen();
+                LOG(1, LOG_LINE_SEPARATOR, L"Shutting down system");
                 refit_call4_wrapper(RT->ResetSystem, EfiResetShutdown, EFI_SUCCESS, 0, NULL);
+                LOG(1, LOG_LINE_NORMAL, L"Shutdown FAILED!");
                 MainLoopRunning = FALSE;   // just in case we get this far
                 break;
 
@@ -2278,6 +569,10 @@
                 StartLegacyUEFI((LEGACY_ENTRY *)ChosenEntry, SelectionName);
                 break;
 
+            case TAG_FIRMWARE_LOADER: // Reboot to a loader defined in the EFI UseNVRAM
+                RebootIntoLoader((LOADER_ENTRY *)ChosenEntry);
+                break;
+
             case TAG_TOOL:     // Start a EFI tool
                 StartTool((LOADER_ENTRY *)ChosenEntry);
                 break;
@@ -2303,12 +598,26 @@
                 RotateCsrValue();
                 break;
 
+            case TAG_INSTALL:
+                InstallRefind();
+                break;
+
+            case TAG_BOOTORDER:
+                ManageBootorder();
+                break;
+
         } // switch()
     } // while()
+    MyFreePool(SelectionName);
 
     // If we end up here, things have gone wrong. Try to reboot, and if that
     // fails, go into an endless loop.
+    LOG(1, LOG_LINE_SEPARATOR, L"Main loop has exited, but it should not have!");
+    UninitRefitLib();
     refit_call4_wrapper(RT->ResetSystem, EfiResetCold, EFI_SUCCESS, 0, NULL);
+    ReinitRefitLib();
+    LOG(1, LOG_LINE_SEPARATOR, L"Shutdown after main loop exit has FAILED!");
+    StopLogging();
     EndlessIdleLoop();
 
     return EFI_SUCCESS;
diff -Naur refind-0.13.3.1-orig/refind/main.c.rej refind-0.13.3.1/refind/main.c.rej
--- refind-0.13.3.1-orig/refind/main.c.rej	1970-01-01 00:00:00.000000000 +0000
+++ refind-0.13.3.1/refind/main.c.rej	2022-11-14 03:17:46.362027441 +0000
@@ -0,0 +1,16 @@
+--- refind/main.c
++++ refind/main.c
+@@ -522,10 +550,9 @@
+     refit_call4_wrapper(BS->SetWatchdogTimer, 0x0000, 0x0000, 0x0000, NULL);
+ 
+     // further bootstrap (now with config available)
+-    SetupScreen();
+-    SetVolumeIcons();
+-    ScanForBootloaders(FALSE);
+-    ScanForTools();
++
++    if (!Silent)
++        SetupScreen();
+     // SetupScreen() clears the screen; but ScanForBootloaders() may display a
+     // message that must be deleted, so do so
+     BltClearScreen(TRUE);
diff -Naur refind-0.13.3.1-orig/refind/menu.c refind-0.13.3.1/refind/menu.c
--- refind-0.13.3.1-orig/refind/menu.c	2022-04-10 22:28:43.000000000 +0000
+++ refind-0.13.3.1/refind/menu.c	2022-11-14 03:17:46.372022441 +0000
@@ -312,7 +312,7 @@
 }
 
 
-static INTN FindMenuShortcutEntry(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *Defaults) {
+INTN FindMenuShortcutEntry(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *Defaults) {
     UINTN i, j = 0, ShortcutLength;
     CHAR16 *Shortcut;
 
diff -Naur refind-0.13.3.1-orig/refind/menu.c.orig refind-0.13.3.1/refind/menu.c.orig
--- refind-0.13.3.1-orig/refind/menu.c.orig	2021-02-21 21:40:58.000000000 +0000
+++ refind-0.13.3.1/refind/menu.c.orig	2022-11-14 03:17:17.036697679 +0000
@@ -34,7 +34,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 /*
- * Modifications copyright (c) 2012-2017 Roderick W. Smith
+ * Modifications copyright (c) 2012-2021 Roderick W. Smith
  *
  * Modifications distributed under the terms of the GNU General Public
  * License (GPL) version 3 (GPLv3), or (at your option) any later version.
@@ -58,6 +58,7 @@
 #include "global.h"
 #include "screen.h"
 #include "lib.h"
+#include "log.h"
 #include "menu.h"
 #include "config.h"
 #include "libeg.h"
@@ -65,6 +66,7 @@
 #include "line_edit.h"
 #include "mystrings.h"
 #include "icns.h"
+#include "scan.h"
 #include "../include/refit_call_wrapper.h"
 
 #include "../include/egemb_back_selected_small.h"
@@ -81,7 +83,7 @@
 #define MENU_FUNCTION_PAINT_TIMEOUT   (4)
 #define MENU_FUNCTION_PAINT_HINTS     (5)
 
-typedef VOID (*MENU_STYLE_FUNC)(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText);
+// typedef VOID (*MENU_STYLE_FUNC)(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText);
 
 static CHAR16 ArrowUp[2] = { ARROW_UP, 0 };
 static CHAR16 ArrowDown[2] = { ARROW_DOWN, 0 };
@@ -94,10 +96,6 @@
 #define TILE_XSPACING (8)
 #define TILE_YSPACING (16)
 
-// Alignment values for PaintIcon()
-#define ALIGN_RIGHT 1
-#define ALIGN_LEFT 0
-
 static EG_IMAGE *SelectionImages[2] = { NULL, NULL };
 static EG_PIXEL SelectionBackgroundPixel = { 0xff, 0xff, 0xff, 0 };
 
@@ -135,7 +133,7 @@
     if (TempSmallImage == NULL)
         TempSmallImage = egPrepareEmbeddedImage(&egemb_back_selected_small, TRUE);
     else
-       LoadedSmallImage = TRUE;
+        LoadedSmallImage = TRUE;
     SelectionImages[1] = egScaleImage(TempSmallImage, TileSizes[1], TileSizes[1]);
 
     // load big selection image
@@ -144,18 +142,18 @@
     }
     if (TempBigImage == NULL) {
         if (LoadedSmallImage) {
-           // calculate big selection image from small one
-           TempBigImage = egCopyImage(TempSmallImage);
+            // calculate big selection image from small one
+            TempBigImage = egCopyImage(TempSmallImage);
         } else {
-           TempBigImage = egPrepareEmbeddedImage(&egemb_back_selected_big, TRUE);
+            TempBigImage = egPrepareEmbeddedImage(&egemb_back_selected_big, TRUE);
         }
     }
     SelectionImages[0] = egScaleImage(TempBigImage, TileSizes[0], TileSizes[0]);
 
     if (TempSmallImage)
-       egFreeImage(TempSmallImage);
+        egFreeImage(TempSmallImage);
     if (TempBigImage)
-       egFreeImage(TempBigImage);
+        egFreeImage(TempBigImage);
 } // VOID InitSelection()
 
 //
@@ -168,9 +166,9 @@
     State->MaxIndex = (INTN)ItemCount - 1;
     State->FirstVisible = 0;
     if (AllowGraphicsMode) {
-       State->MaxVisible = UGAWidth / (TileSizes[0] + TILE_XSPACING) - 1;
+        State->MaxVisible = UGAWidth / (TileSizes[0] + TILE_XSPACING) - 1;
     } else
-       State->MaxVisible = ConHeight - 4;
+        State->MaxVisible = ConHeight - 4;
     if ((VisibleSpace > 0) && (VisibleSpace < State->MaxVisible))
         State->MaxVisible = (INTN)VisibleSpace;
     State->PaintAll = TRUE;
@@ -182,18 +180,18 @@
 // Adjust variables relating to the scrolling of tags, for when a selected icon isn't
 // visible given the current scrolling condition....
 static VOID AdjustScrollState(IN SCROLL_STATE *State) {
-   if (State->CurrentSelection > State->LastVisible) {
-      State->LastVisible = State->CurrentSelection;
-      State->FirstVisible = 1 + State->CurrentSelection - State->MaxVisible;
-      if (State->FirstVisible < 0) // shouldn't happen, but just in case....
-         State->FirstVisible = 0;
-      State->PaintAll = TRUE;
-   } // Scroll forward
-   if (State->CurrentSelection < State->FirstVisible) {
-      State->FirstVisible = State->CurrentSelection;
-      State->LastVisible = State->CurrentSelection + State->MaxVisible - 1;
-      State->PaintAll = TRUE;
-   } // Scroll backward
+    if (State->CurrentSelection > State->LastVisible) {
+        State->LastVisible = State->CurrentSelection;
+        State->FirstVisible = 1 + State->CurrentSelection - State->MaxVisible;
+        if (State->FirstVisible < 0) // shouldn't happen, but just in case....
+            State->FirstVisible = 0;
+        State->PaintAll = TRUE;
+    } // Scroll forward
+    if (State->CurrentSelection < State->FirstVisible) {
+        State->FirstVisible = State->CurrentSelection;
+        State->LastVisible = State->CurrentSelection + State->MaxVisible - 1;
+        State->PaintAll = TRUE;
+    } // Scroll backward
 } // static VOID AdjustScrollState
 
 static VOID UpdateScroll(IN OUT SCROLL_STATE *State, IN UINTN Movement)
@@ -291,7 +289,7 @@
 
     }
     if (State->ScrollMode == SCROLL_MODE_TEXT)
-       AdjustScrollState(State);
+        AdjustScrollState(State);
 
     if (!State->PaintAll && State->CurrentSelection != State->PreviousSelection)
         State->PaintSelection = TRUE;
@@ -304,6 +302,7 @@
 
 VOID AddMenuInfoLine(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *InfoLine)
 {
+    LOG(3, LOG_LINE_NORMAL, L"Adding menu info line: '%s'", InfoLine);
     AddListElement((VOID ***) &(Screen->InfoLines), &(Screen->InfoLineCount), InfoLine);
 }
 
@@ -324,9 +323,10 @@
                 Shortcut[0] -= ('a' - 'A');
             if (Shortcut[0]) {
                 for (i = 0; i < Screen->EntryCount; i++) {
-                    if (Screen->Entries[i]->ShortcutDigit == Shortcut[0] || Screen->Entries[i]->ShortcutLetter == Shortcut[0]) {
-                        MyFreePool(Shortcut);
-                        return i;
+                    if (Screen->Entries[i]->ShortcutDigit == Shortcut[0] ||
+                        Screen->Entries[i]->ShortcutLetter == Shortcut[0]) {
+                            MyFreePool(Shortcut);
+                            return i;
                     } // if
                 } // for
             } // if
@@ -368,23 +368,24 @@
 // TODO: Support more sophisticated screen savers, such as power-saving
 // mode and dynamic images.
 static VOID SaveScreen(VOID) {
-   EG_PIXEL Black = { 0x0, 0x0, 0x0, 0 };
-   
-   egClearScreen(&Black);
+    EG_PIXEL Black = { 0x0, 0x0, 0x0, 0 };
    
-   WaitForInput(0);
+    egClearScreen(&Black);
+
+    WaitForInput(0);
 
-   if (AllowGraphicsMode)
-      SwitchToGraphicsAndClear();
-   ReadAllKeyStrokes();
+    if (AllowGraphicsMode)
+        SwitchToGraphicsAndClear();
+    ReadAllKeyStrokes();
 } // VOID SaveScreen()
 
 //
 // generic menu function
 //
-static UINTN RunGenericMenu(IN REFIT_MENU_SCREEN *Screen, IN MENU_STYLE_FUNC StyleFunc, IN OUT INTN *DefaultEntryIndex,
-                            OUT REFIT_MENU_ENTRY **ChosenEntry)
-{
+UINTN RunGenericMenu(IN REFIT_MENU_SCREEN *Screen,
+                     IN MENU_STYLE_FUNC StyleFunc,
+                     IN OUT INTN *DefaultEntryIndex,
+                     OUT REFIT_MENU_ENTRY **ChosenEntry) {
     SCROLL_STATE State;
     EFI_STATUS Status;
     EFI_INPUT_KEY key;
@@ -399,6 +400,7 @@
     EFI_STATUS PointerStatus = EFI_NOT_READY;
     UINTN Item;
 
+    LOG(2, LOG_LINE_NORMAL, L"Running menu screen: '%s'", Screen->Title);
     if (Screen->TimeoutSeconds > 0) {
         HaveTimeout = TRUE;
         TimeoutCountdown = Screen->TimeoutSeconds * 10;
@@ -416,9 +418,7 @@
 
     if (Screen->TimeoutSeconds == -1) {
         Status = refit_call2_wrapper(ST->ConIn->ReadKeyStroke, ST->ConIn, &key);
-        if (Status == EFI_NOT_READY) {
-            MenuExit = MENU_EXIT_TIMEOUT;
-        } else {
+        if (Status == EFI_SUCCESS) {
             KeyAsString[0] = key.UnicodeChar;
             KeyAsString[1] = 0;
             ShortcutEntry = FindMenuShortcutEntry(Screen, KeyAsString);
@@ -429,12 +429,15 @@
                 WaitForRelease = TRUE;
                 HaveTimeout = FALSE;
             }
+        } else {
+            MenuExit = MENU_EXIT_TIMEOUT;
         }
     }
 
     if (GlobalConfig.ScreensaverTime != -1)
         State.PaintAll = TRUE;
 
+    LOG(3, LOG_LINE_NORMAL, L"About to enter while() loop in RunGenericMenu()");
     while (!MenuExit) {
         // update the screen
         pdClear();
@@ -445,9 +448,7 @@
             StyleFunc(Screen, &State, MENU_FUNCTION_PAINT_SELECTION, NULL);
             State.PaintSelection = FALSE;
         }
-        if(PointerActive) {
-            pdDraw();
-        }
+        pdDraw();
 
         if (WaitForRelease) {
             Status = refit_call2_wrapper(ST->ConIn->ReadKeyStroke, ST->ConIn, &key);
@@ -472,26 +473,15 @@
             }
         }
 
-<<<<<<< HEAD
-        // read key press or touch event (and wait for them if applicable)
-        if (TouchEnabled) {
-             TouchStatus = refit_call2_wrapper(TouchProtocol->GetState, TouchProtocol, &TouchState);
-        }
-        Status = refit_call2_wrapper(ST->ConIn->ReadKeyStroke, ST->ConIn, &key);
-
-        if (Status == EFI_SUCCESS) {
-            TouchActive = FALSE;
-=======
         // read key press or pointer event (and wait for them if applicable)
-        if(PointerEnabled) {
+        if (PointerEnabled) {
             PointerStatus = pdUpdateState();
         }
         Status = refit_call2_wrapper(ST->ConIn->ReadKeyStroke, ST->ConIn, &key);
 
-        if(Status == EFI_SUCCESS) {
+        if (Status == EFI_SUCCESS) {
             PointerActive = FALSE;
             DrawSelection = TRUE;
->>>>>>> d63734581c19715b3dc13ab89c520def8d5c4566
             TimeSinceKeystroke = 0;
         } else if (PointerStatus == EFI_SUCCESS) {
             if (StyleFunc != MainMenuStyle && pdGetState().Press) {
@@ -506,6 +496,7 @@
         } else {
             if (HaveTimeout && TimeoutCountdown == 0) {
                 // timeout expired
+                LOG(1, LOG_LINE_NORMAL, L"Menu timeout expired");
                 MenuExit = MENU_EXIT_TIMEOUT;
                 break;
             } else if (HaveTimeout || GlobalConfig.ScreensaverTime > 0) {
@@ -513,21 +504,21 @@
 
                 UINTN Input = WaitForInput(1000); // 1s Timeout
 
-                if(Input == INPUT_KEY || Input == INPUT_POINTER) {
+                if (Input == INPUT_KEY || Input == INPUT_POINTER) {
                     continue;
-                } else if(Input == INPUT_TIMEOUT) {
+                } else if (Input == INPUT_TIMEOUT) {
                     ElapsCount = 10; // always counted as 1s to end of the timeout
                 }
 
                 TimeSinceKeystroke += ElapsCount;
-                if(HaveTimeout) {
+                if (HaveTimeout) {
                     TimeoutCountdown = TimeoutCountdown <= ElapsCount ? 0 : TimeoutCountdown - ElapsCount;
                 } else if (GlobalConfig.ScreensaverTime > 0 &&
-                        TimeSinceKeystroke > (GlobalConfig.ScreensaverTime * 10))
+                    TimeSinceKeystroke > (GlobalConfig.ScreensaverTime * 10))
                 {
-                        SaveScreen();
-                        State.PaintAll = TRUE;
-                        TimeSinceKeystroke = 0;
+                    SaveScreen();
+                    State.PaintAll = TRUE;
+                    TimeSinceKeystroke = 0;
                 } // if
             } else {
                 WaitForInput(0);
@@ -546,7 +537,8 @@
             }
         }
 
-        if(!PointerActive) { // react to key press
+        if (!PointerActive) { // react to key press
+            LOG(3, LOG_LINE_NORMAL, L"Processing keystroke (ScanCode = %d)....", key.ScanCode);
             switch (key.ScanCode) {
                 case SCAN_UP:
                     UpdateScroll(&State, SCROLL_LINE_UP);
@@ -590,6 +582,7 @@
                         MenuExit = MENU_EXIT_ESCAPE;
                     break;
             }
+            LOG(3, LOG_LINE_NORMAL, L"Processing keystroke (UnicodeChar = %d)....", key.UnicodeChar);
             switch (key.UnicodeChar) {
                 case CHAR_LINEFEED:
                 case CHAR_CARRIAGE_RETURN:
@@ -603,9 +596,12 @@
                 case CHAR_TAB:
                     MenuExit = MENU_EXIT_DETAILS;
                     break;
-                case 'd':
+                case '-':
                     MenuExit = MENU_EXIT_HIDE;
                     break;
+                case '\\':
+                    egScreenShot();
+                    break;
                 default:
                     KeyAsString[0] = key.UnicodeChar;
                     KeyAsString[1] = 0;
@@ -617,6 +613,7 @@
                     break;
             }
         } else { //react to pointer event
+            LOG(3, LOG_LINE_NORMAL, L"Processing pointer event");
             if (StyleFunc != MainMenuStyle) {
                 continue; // nothing to find on submenus
             }
@@ -658,9 +655,9 @@
                         MenuExit = MENU_EXIT_ENTER;
                     }
                     break;
-            }
-        }
-    }
+            } // switch()
+        } // if/else
+    } // while()
 
     pdClear();
     StyleFunc(Screen, &State, MENU_FUNCTION_CLEANUP, NULL);
@@ -668,8 +665,9 @@
     if (ChosenEntry)
         *ChosenEntry = Screen->Entries[State.CurrentSelection];
     *DefaultEntryIndex = State.CurrentSelection;
+    LOG(3, LOG_LINE_NORMAL, L"Returning %d from RunGenericMenu()", MenuExit);
     return MenuExit;
-} /* static UINTN RunGenericMenu() */
+} // UINTN RunGenericMenu()
 
 //
 // text-mode generic style
@@ -677,20 +675,23 @@
 
 // Show information lines in text mode.
 static VOID ShowTextInfoLines(IN REFIT_MENU_SCREEN *Screen) {
-   INTN i;
+    INTN i;
 
-   BeginTextScreen(Screen->Title);
-   if (Screen->InfoLineCount > 0) {
-      refit_call2_wrapper(ST->ConOut->SetAttribute, ST->ConOut, ATTR_BASIC);
-      for (i = 0; i < (INTN)Screen->InfoLineCount; i++) {
-         refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 3, 4 + i);
-         refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, Screen->InfoLines[i]);
-      }
-   }
+    BeginTextScreen(Screen->Title);
+    if (Screen->InfoLineCount > 0) {
+        refit_call2_wrapper(ST->ConOut->SetAttribute, ST->ConOut, ATTR_BASIC);
+        for (i = 0; i < (INTN)Screen->InfoLineCount; i++) {
+            refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 3, 4 + i);
+            refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, Screen->InfoLines[i]);
+        }
+    }
 } // VOID ShowTextInfoLines()
 
 // Do most of the work for text-based menus....
-static VOID TextMenuStyle(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText)
+VOID TextMenuStyle(IN REFIT_MENU_SCREEN *Screen,
+                   IN SCROLL_STATE *State,
+                   IN UINTN Function,
+                   IN CHAR16 *ParamText)
 {
     INTN i;
     UINTN MenuWidth, ItemWidth, MenuHeight;
@@ -757,7 +758,10 @@
             ShowTextInfoLines(Screen);
             for (i = 0; i <= State->MaxIndex; i++) {
                 if (i >= State->FirstVisible && i <= State->LastVisible) {
-                    refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 2, MenuPosY + (i - State->FirstVisible));
+                    refit_call3_wrapper(ST->ConOut->SetCursorPosition,
+                                        ST->ConOut,
+                                        2,
+                                        MenuPosY + (i - State->FirstVisible));
                     if (i == State->CurrentSelection)
                        refit_call2_wrapper(ST->ConOut->SetAttribute, ST->ConOut, ATTR_CHOICE_CURRENT);
                     else
@@ -771,21 +775,24 @@
             if (State->FirstVisible > 0)
                 refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, ArrowUp);
             else
-               refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, L" ");
-            refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 0, MenuPosY + State->MaxVisible);
+                refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, L" ");
+            refit_call3_wrapper(ST->ConOut->SetCursorPosition,
+                                ST->ConOut,
+                                0,
+                                MenuPosY + State->MaxVisible);
             if (State->LastVisible < State->MaxIndex)
-               refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, ArrowDown);
+                refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, ArrowDown);
             else
-               refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, L" ");
+                refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, L" ");
             if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_HINTS)) {
-               if (Screen->Hint1 != NULL) {
-                  refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 0, ConHeight - 2);
-                  refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, Screen->Hint1);
-               }
-               if (Screen->Hint2 != NULL) {
-                  refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 0, ConHeight - 1);
-                  refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, Screen->Hint2);
-               }
+                if (Screen->Hint1 != NULL) {
+                    refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 0, ConHeight - 2);
+                    refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, Screen->Hint1);
+                }
+                if (Screen->Hint2 != NULL) {
+                    refit_call3_wrapper(ST->ConOut->SetCursorPosition, ST->ConOut, 0, ConHeight - 1);
+                    refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, Screen->Hint2);
+                }
             }
             break;
 
@@ -815,7 +822,6 @@
                 refit_call2_wrapper(ST->ConOut->OutputString, ST->ConOut, TimeoutMessage);
             }
             break;
-
     }
 }
 
@@ -824,7 +830,7 @@
 //
 
 inline static UINTN TextLineHeight(VOID) {
-   return egGetFontHeight() + TEXT_YMARGIN * 2;
+    return egGetFontHeight() + TEXT_YMARGIN * 2;
 } // UINTN TextLineHeight()
 
 //
@@ -836,24 +842,24 @@
 // specified XPos and YPos locations.
 static VOID DrawText(IN CHAR16 *Text, IN BOOLEAN Selected, IN UINTN FieldWidth, IN UINTN XPos, IN UINTN YPos)
 {
-   EG_IMAGE *TextBuffer;
-   EG_PIXEL Bg;
+    EG_IMAGE *TextBuffer;
+    EG_PIXEL Bg;
 
-   TextBuffer = egCreateImage(FieldWidth, TextLineHeight(), FALSE);
+    TextBuffer = egCreateFilledImage(FieldWidth, TextLineHeight(), FALSE, &MenuBackgroundPixel);
+    if (TextBuffer) {
+        Bg = MenuBackgroundPixel;
+        if (Selected) {
+            // draw selection bar background
+            egFillImageArea(TextBuffer, 0, 0, FieldWidth, TextBuffer->Height, &SelectionBackgroundPixel);
+            Bg = SelectionBackgroundPixel;
+        }
 
-   egFillImage(TextBuffer, &MenuBackgroundPixel);
-   Bg = MenuBackgroundPixel;
-   if (Selected) {
-       // draw selection bar background
-       egFillImageArea(TextBuffer, 0, 0, FieldWidth, TextBuffer->Height, &SelectionBackgroundPixel);
-       Bg = SelectionBackgroundPixel;
-   }
-
-   // render the text
-   egRenderText(Text, TextBuffer, egGetFontCellWidth(), TEXT_YMARGIN, (Bg.r + Bg.g + Bg.b) / 3);
-   egDrawImageWithTransparency(TextBuffer, NULL, XPos, YPos, TextBuffer->Width, TextBuffer->Height);
-//    BltImage(TextBuffer, XPos, YPos);
-}
+        // render the text
+        egRenderText(Text, TextBuffer, egGetFontCellWidth(), TEXT_YMARGIN, (Bg.r + Bg.g + Bg.b) / 3);
+        egDrawImageWithTransparency(TextBuffer, NULL, XPos, YPos, TextBuffer->Width, TextBuffer->Height);
+        egFreeImage(TextBuffer);
+    }
+} /* VOID DrawText() */
 
 // Finds the average brightness of the input Image.
 // NOTE: Passing an Image that covers the whole screen can strain the
@@ -863,16 +869,16 @@
 // a single text string's background, this shouldn't be a problem, but it
 // may need addressing if it's applied more broadly....
 static UINT8 AverageBrightness(EG_IMAGE *Image) {
-   UINTN i;
-   UINTN Sum = 0;
+    UINTN i;
+    UINTN Sum = 0;
 
-   if ((Image != NULL) && ((Image->Width * Image->Height) != 0)) {
-      for (i = 0; i < (Image->Width * Image->Height); i++) {
-         Sum += (Image->PixelData[i].r + Image->PixelData[i].g + Image->PixelData[i].b);
-      }
-      Sum /= (Image->Width * Image->Height * 3);
-   } // if
-   return (UINT8) Sum;
+    if ((Image != NULL) && ((Image->Width * Image->Height) != 0)) {
+        for (i = 0; i < (Image->Width * Image->Height); i++) {
+            Sum += (Image->PixelData[i].r + Image->PixelData[i].g + Image->PixelData[i].b);
+        }
+        Sum /= (Image->Width * Image->Height * 3);
+    } // if
+    return (UINT8) Sum;
 } // UINT8 AverageBrightness()
 
 // Display text against the screen's background image. Special case: If Text is NULL
@@ -903,72 +909,77 @@
 }
 
 // Compute the size & position of the window that will hold a subscreen's information.
-static VOID ComputeSubScreenWindowSize(REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, UINTN *XPos, UINTN *YPos,
+static VOID ComputeSubScreenWindowSize(REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State,
+                                       UINTN *XPos, UINTN *YPos,
                                        UINTN *Width, UINTN *Height, UINTN *LineWidth) {
-   UINTN i, ItemWidth, HintTop, BannerBottomEdge, TitleWidth;
-   UINTN FontCellWidth = egGetFontCellWidth();
-   UINTN FontCellHeight = egGetFontHeight();
-
-   *Width = 20;
-   *Height = 5;
-   TitleWidth = egComputeTextWidth(Screen->Title);
-
-   for (i = 0; i < Screen->InfoLineCount; i++) {
-       ItemWidth = StrLen(Screen->InfoLines[i]);
-       if (*Width < ItemWidth) {
-           *Width = ItemWidth;
-       }
-       (*Height)++;
-   }
-   for (i = 0; i <= State->MaxIndex; i++) {
-       ItemWidth = StrLen(Screen->Entries[i]->Title);
-       if (*Width < ItemWidth) {
-           *Width = ItemWidth;
-       }
-       (*Height)++;
-   }
-   *Width = (*Width + 2) * FontCellWidth;
-   *LineWidth = *Width;
-   if (Screen->TitleImage)
-      *Width += (Screen->TitleImage->Width + TITLEICON_SPACING * 2 + FontCellWidth);
-   else
-      *Width += FontCellWidth;
-
-   if (*Width < TitleWidth)
-      *Width = TitleWidth + 2 * FontCellWidth;
-
-   // Keep it within the bounds of the screen, or 2/3 of the screen's width
-   // for screens over 800 pixels wide
-   if (*Width > UGAWidth)
-      *Width = UGAWidth;
-
-   *XPos = (UGAWidth - *Width) / 2;
-
-   HintTop = UGAHeight - (FontCellHeight * 3); // top of hint text
-   *Height *= TextLineHeight();
-   if (Screen->TitleImage && (*Height < (Screen->TitleImage->Height + TextLineHeight() * 4)))
-      *Height = Screen->TitleImage->Height + TextLineHeight() * 4;
-
-   if (GlobalConfig.BannerBottomEdge >= HintTop) { // probably a full-screen image; treat it as an empty banner
-      BannerBottomEdge = 0;
-   } else {
-      BannerBottomEdge = GlobalConfig.BannerBottomEdge;
-   }
-   if (*Height > (HintTop - BannerBottomEdge - FontCellHeight * 2)) {
-      BannerBottomEdge = 0;
-   }
-   if (*Height > (HintTop - BannerBottomEdge - FontCellHeight * 2)) {
-      // TODO: Implement scrolling in text screen.
-      *Height = (HintTop - BannerBottomEdge - FontCellHeight * 2);
-   }
-
-   *YPos = ((UGAHeight - *Height) / 2);
-   if (*YPos < BannerBottomEdge)
-      *YPos = BannerBottomEdge + FontCellHeight + (HintTop - BannerBottomEdge - *Height) / 2;
+    UINTN i, ItemWidth, HintTop, BannerBottomEdge, TitleWidth;
+    UINTN FontCellWidth = egGetFontCellWidth();
+    UINTN FontCellHeight = egGetFontHeight();
+
+    *Width = 20;
+    *Height = 5;
+    TitleWidth = egComputeTextWidth(Screen->Title);
+
+    for (i = 0; i < Screen->InfoLineCount; i++) {
+         ItemWidth = StrLen(Screen->InfoLines[i]);
+         if (*Width < ItemWidth) {
+              *Width = ItemWidth;
+         }
+         (*Height)++;
+    }
+    for (i = 0; i <= State->MaxIndex; i++) {
+         ItemWidth = StrLen(Screen->Entries[i]->Title);
+         if (*Width < ItemWidth) {
+              *Width = ItemWidth;
+         }
+         (*Height)++;
+    }
+    *Width = (*Width + 2) * FontCellWidth;
+    *LineWidth = *Width;
+    if (Screen->TitleImage)
+        *Width += (Screen->TitleImage->Width + TITLEICON_SPACING * 2 + FontCellWidth);
+    else
+        *Width += FontCellWidth;
+
+    if (*Width < TitleWidth)
+        *Width = TitleWidth + 2 * FontCellWidth;
+
+    // Keep it within the bounds of the screen, or 2/3 of the screen's width
+    // for screens over 800 pixels wide
+    if (*Width > UGAWidth)
+        *Width = UGAWidth;
+
+    *XPos = (UGAWidth - *Width) / 2;
+
+    HintTop = UGAHeight - (FontCellHeight * 3); // top of hint text
+    *Height *= TextLineHeight();
+    if (Screen->TitleImage && (*Height < (Screen->TitleImage->Height + TextLineHeight() * 4)))
+        *Height = Screen->TitleImage->Height + TextLineHeight() * 4;
+
+    if (GlobalConfig.BannerBottomEdge >= HintTop) {
+        // probably a full-screen image; treat it as an empty banner
+        BannerBottomEdge = 0;
+    } else {
+        BannerBottomEdge = GlobalConfig.BannerBottomEdge;
+    }
+    if (*Height > (HintTop - BannerBottomEdge - FontCellHeight * 2)) {
+        BannerBottomEdge = 0;
+    }
+    if (*Height > (HintTop - BannerBottomEdge - FontCellHeight * 2)) {
+        // TODO: Implement scrolling in text screen.
+        *Height = (HintTop - BannerBottomEdge - FontCellHeight * 2);
+    }
+
+    *YPos = ((UGAHeight - *Height) / 2);
+    if (*YPos < BannerBottomEdge)
+        *YPos = BannerBottomEdge + FontCellHeight + (HintTop - BannerBottomEdge - *Height) / 2;
 } // VOID ComputeSubScreenWindowSize()
 
 // Displays sub-menus
-static VOID GraphicsMenuStyle(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText)
+VOID GraphicsMenuStyle(IN REFIT_MENU_SCREEN *Screen,
+                       IN SCROLL_STATE *State,
+                       IN UINTN Function,
+                       IN CHAR16 *ParamText)
 {
     INTN i;
     UINTN ItemWidth;
@@ -988,7 +999,10 @@
             // initial painting
             SwitchToGraphicsAndClear();
             Window = egCreateFilledImage(MenuWidth, MenuHeight, FALSE, BackgroundPixel);
-            egDrawImage(Window, EntriesPosX, EntriesPosY);
+            if (Window) {
+                egDrawImage(Window, EntriesPosX, EntriesPosY);
+                egFreeImage(Window);
+            }
             ItemWidth = egComputeTextWidth(Screen->Title);
             if (MenuWidth > ItemWidth) {
                TitlePosX = EntriesPosX + (MenuWidth - ItemWidth) / 2 - CharWidth;
@@ -1007,10 +1021,13 @@
             break;
 
         case MENU_FUNCTION_PAINT_ALL:
-           ComputeSubScreenWindowSize(Screen, State, &EntriesPosX, &EntriesPosY, &MenuWidth, &MenuHeight, &LineWidth);
-           DrawText(Screen->Title, FALSE, (StrLen(Screen->Title) + 2) * CharWidth, TitlePosX, EntriesPosY += TextLineHeight());
+           ComputeSubScreenWindowSize(Screen, State, &EntriesPosX, &EntriesPosY,
+                                      &MenuWidth, &MenuHeight, &LineWidth);
+           DrawText(Screen->Title, FALSE, (StrLen(Screen->Title) + 2) * CharWidth,
+                    TitlePosX, EntriesPosY += TextLineHeight());
            if (Screen->TitleImage) {
-              BltImageAlpha(Screen->TitleImage, EntriesPosX + TITLEICON_SPACING, EntriesPosY + TextLineHeight() * 2,
+              BltImageAlpha(Screen->TitleImage, EntriesPosX + TITLEICON_SPACING,
+                            EntriesPosY + TextLineHeight() * 2,
                             BackgroundPixel);
               EntriesPosX += (Screen->TitleImage->Width + TITLEICON_SPACING * 2);
            }
@@ -1058,145 +1075,147 @@
 
 static VOID DrawMainMenuEntry(REFIT_MENU_ENTRY *Entry, BOOLEAN selected, UINTN XPos, UINTN YPos)
 {
-   EG_IMAGE *Background;
+    EG_IMAGE *Background;
 
-   // if using pointer, don't draw selection image when not hovering
-   if (selected && DrawSelection) {
-      Background = egCropImage(GlobalConfig.ScreenBackground, XPos, YPos,
-                               SelectionImages[Entry->Row]->Width, SelectionImages[Entry->Row]->Height);
-      egComposeImage(Background, SelectionImages[Entry->Row], 0, 0);
-      BltImageCompositeBadge(Background, Entry->Image, Entry->BadgeImage, XPos, YPos);
-   } else { // Image not selected; copy background
-      egDrawImageWithTransparency(Entry->Image, Entry->BadgeImage, XPos, YPos,
-                                  SelectionImages[Entry->Row]->Width, SelectionImages[Entry->Row]->Height);
-   } // if/else
+    // if using pointer, don't draw selection image when not hovering
+    if (selected && DrawSelection) {
+        Background = egCropImage(GlobalConfig.ScreenBackground, XPos, YPos,
+                                 SelectionImages[Entry->Row]->Width, SelectionImages[Entry->Row]->Height);
+        if (Background) {
+            egComposeImage(Background, SelectionImages[Entry->Row], 0, 0);
+            BltImageCompositeBadge(Background, Entry->Image, Entry->BadgeImage, XPos, YPos);
+            egFreeImage(Background);
+        } // if
+    } else { // Image not selected; copy background
+        egDrawImageWithTransparency(Entry->Image, Entry->BadgeImage, XPos, YPos,
+                                    SelectionImages[Entry->Row]->Width, SelectionImages[Entry->Row]->Height);
+    } // if/else
 } // VOID DrawMainMenuEntry()
 
 static VOID PaintAll(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, UINTN *itemPosX,
                      UINTN row0PosY, UINTN row1PosY, UINTN textPosY) {
-   INTN i;
-   if (Screen->Entries[State->CurrentSelection]->Row == 0)
-      AdjustScrollState(State);
-   for (i = State->FirstVisible; i <= State->MaxIndex; i++) {
-      if (Screen->Entries[i]->Row == 0) {
-         if (i <= State->LastVisible) {
-            DrawMainMenuEntry(Screen->Entries[i], (i == State->CurrentSelection) ? TRUE : FALSE,
-                              itemPosX[i - State->FirstVisible], row0PosY);
-         } // if
-      } else {
-         DrawMainMenuEntry(Screen->Entries[i], (i == State->CurrentSelection) ? TRUE : FALSE, itemPosX[i], row1PosY);
-      }
-   }
-   if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_LABEL) && (!PointerActive || (PointerActive && DrawSelection))) {
-      DrawTextWithTransparency(L"", 0, textPosY);
-      DrawTextWithTransparency(Screen->Entries[State->CurrentSelection]->Title,
-                               (UGAWidth - egComputeTextWidth(Screen->Entries[State->CurrentSelection]->Title)) >> 1,
-                               textPosY);
-   } else {
+    INTN i;
+
+    if (Screen->Entries[State->CurrentSelection]->Row == 0)
+        AdjustScrollState(State);
+    for (i = State->FirstVisible; i <= State->MaxIndex; i++) {
+        if (Screen->Entries[i]->Row == 0) {
+            if (i <= State->LastVisible) {
+                DrawMainMenuEntry(Screen->Entries[i], (i == State->CurrentSelection) ? TRUE : FALSE,
+                                  itemPosX[i - State->FirstVisible], row0PosY);
+            } // if
+        } else {
+            DrawMainMenuEntry(Screen->Entries[i],
+                              (i == State->CurrentSelection) ? TRUE : FALSE,
+                              itemPosX[i], row1PosY);
+        }
+    }
+    if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_LABEL) && (!PointerActive || (PointerActive && DrawSelection))) {
         DrawTextWithTransparency(L"", 0, textPosY);
-   }
+        DrawTextWithTransparency(Screen->Entries[State->CurrentSelection]->Title,
+                                 (UGAWidth - egComputeTextWidth(Screen->Entries[State->CurrentSelection]->Title)) >> 1,
+                                 textPosY);
+    } else {
+          DrawTextWithTransparency(L"", 0, textPosY);
+    }
 
-   if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_HINTS)) {
-      DrawTextWithTransparency(Screen->Hint1, (UGAWidth - egComputeTextWidth(Screen->Hint1)) / 2,
-                               UGAHeight - (egGetFontHeight() * 3));
-      DrawTextWithTransparency(Screen->Hint2, (UGAWidth - egComputeTextWidth(Screen->Hint2)) / 2,
-                               UGAHeight - (egGetFontHeight() * 2));
-   } // if
+    if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_HINTS)) {
+        DrawTextWithTransparency(Screen->Hint1, (UGAWidth - egComputeTextWidth(Screen->Hint1)) / 2,
+                                 UGAHeight - (egGetFontHeight() * 3));
+        DrawTextWithTransparency(Screen->Hint2, (UGAWidth - egComputeTextWidth(Screen->Hint2)) / 2,
+                                 UGAHeight - (egGetFontHeight() * 2));
+    } // if
 } // static VOID PaintAll()
 
 // Move the selection to State->CurrentSelection, adjusting icon row if necessary...
 static VOID PaintSelection(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, UINTN *itemPosX,
                            UINTN row0PosY, UINTN row1PosY, UINTN textPosY) {
-   UINTN XSelectPrev, XSelectCur, YPosPrev, YPosCur;
+    UINTN XSelectPrev, XSelectCur, YPosPrev, YPosCur;
 
-   if (((State->CurrentSelection <= State->LastVisible) && (State->CurrentSelection >= State->FirstVisible)) ||
-       (State->CurrentSelection >= State->InitialRow1) ) {
-      if (Screen->Entries[State->PreviousSelection]->Row == 0) {
-         XSelectPrev = State->PreviousSelection - State->FirstVisible;
-         YPosPrev = row0PosY;
-      } else {
-         XSelectPrev = State->PreviousSelection;
-         YPosPrev = row1PosY;
-      } // if/else
-      if (Screen->Entries[State->CurrentSelection]->Row == 0) {
-         XSelectCur = State->CurrentSelection - State->FirstVisible;
-         YPosCur = row0PosY;
-      } else {
-         XSelectCur = State->CurrentSelection;
-         YPosCur = row1PosY;
-      } // if/else
-      DrawMainMenuEntry(Screen->Entries[State->PreviousSelection], FALSE, itemPosX[XSelectPrev], YPosPrev);
-      DrawMainMenuEntry(Screen->Entries[State->CurrentSelection], TRUE, itemPosX[XSelectCur], YPosCur);
-      if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_LABEL) && (!PointerActive || (PointerActive && DrawSelection))) {
-         DrawTextWithTransparency(L"", 0, textPosY);
-         DrawTextWithTransparency(Screen->Entries[State->CurrentSelection]->Title,
-                                  (UGAWidth - egComputeTextWidth(Screen->Entries[State->CurrentSelection]->Title)) >> 1,
-                                  textPosY);
-      } else {
-          DrawTextWithTransparency(L"", 0, textPosY);
-      }
-   } else { // Current selection not visible; must redraw the menu....
-      MainMenuStyle(Screen, State, MENU_FUNCTION_PAINT_ALL, NULL);
-   }
+    if (((State->CurrentSelection <= State->LastVisible) &&
+        (State->CurrentSelection >= State->FirstVisible)) ||
+        (State->CurrentSelection >= State->InitialRow1) ) {
+        if (Screen->Entries[State->PreviousSelection]->Row == 0) {
+            XSelectPrev = State->PreviousSelection - State->FirstVisible;
+            YPosPrev = row0PosY;
+        } else {
+            XSelectPrev = State->PreviousSelection;
+            YPosPrev = row1PosY;
+        } // if/else
+        if (Screen->Entries[State->CurrentSelection]->Row == 0) {
+            XSelectCur = State->CurrentSelection - State->FirstVisible;
+            YPosCur = row0PosY;
+        } else {
+            XSelectCur = State->CurrentSelection;
+            YPosCur = row1PosY;
+        } // if/else
+        DrawMainMenuEntry(Screen->Entries[State->PreviousSelection], FALSE,
+                          itemPosX[XSelectPrev], YPosPrev);
+        DrawMainMenuEntry(Screen->Entries[State->CurrentSelection], TRUE,
+                          itemPosX[XSelectCur], YPosCur);
+        if (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_LABEL) && (!PointerActive || (PointerActive && DrawSelection))) {
+            DrawTextWithTransparency(L"", 0, textPosY);
+            DrawTextWithTransparency(Screen->Entries[State->CurrentSelection]->Title,
+                                     (UGAWidth - egComputeTextWidth(Screen->Entries[State->CurrentSelection]->Title)) >> 1,
+                                     textPosY);
+        } else {
+             DrawTextWithTransparency(L"", 0, textPosY);
+        }
+    } else { // Current selection not visible; must redraw the menu....
+        MainMenuStyle(Screen, State, MENU_FUNCTION_PAINT_ALL, NULL);
+    }
 } // static VOID MoveSelection(VOID)
 
-// Display a 48x48 icon at the specified location. Uses the image specified by
-// ExternalFilename if it's available, or BuiltInImage if it's not. The
-// Y position is specified as the center value, and so is adjusted by half
-// the icon's height. The X position is set along the icon's left
-// edge if Alignment == ALIGN_LEFT, and along the right edge if
-// Alignment == ALIGN_RIGHT
-static VOID PaintIcon(IN EG_EMBEDDED_IMAGE *BuiltInIcon, IN CHAR16 *ExternalFilename, UINTN PosX, UINTN PosY, UINTN Alignment) {
-   EG_IMAGE *Icon = NULL;
-
-   Icon = egFindIcon(ExternalFilename, GlobalConfig.IconSizes[ICON_SIZE_SMALL]);
-   if (Icon == NULL)
-      Icon = egPrepareEmbeddedImage(BuiltInIcon, TRUE);
-   if (Icon != NULL) {
-      if (Alignment == ALIGN_RIGHT)
-         PosX -= Icon->Width;
-      egDrawImageWithTransparency(Icon, NULL, PosX, PosY - (Icon->Height / 2), Icon->Width, Icon->Height);
-   }
-} // static VOID ()
+// Fetches the image specified by ExternalFilename if it's available, or BuiltInImage if it's not.
+static EG_IMAGE * GetIcon(IN EG_EMBEDDED_IMAGE *BuiltInIcon, IN CHAR16 *ExternalFilename){
+    EG_IMAGE * Icon = egFindIcon(ExternalFilename, GlobalConfig.IconSizes[ICON_SIZE_SMALL]);
+    if(Icon != NULL) return Icon;
+    return egPrepareEmbeddedImage(BuiltInIcon, TRUE);
+}
 
 UINTN ComputeRow0PosY(VOID) {
-   return ((UGAHeight / 2) - TileSizes[0] / 2);
+    return ((UGAHeight / 2) - TileSizes[0] / 2);
 } // UINTN ComputeRow0PosY()
 
+static VOID ClearWithBackground(UINTN PosX, UINTN PosY, UINTN Width, UINTN Height){
+    EG_IMAGE * TempImage = egCropImage(GlobalConfig.ScreenBackground, PosX, PosY, Width, Height);
+    BltImage(TempImage, PosX, PosY);
+    egFreeImage(TempImage);
+}
+
+// PosY is specified as the center value, PosX is left aligned.
+static VOID PaintArrow(EG_IMAGE * Arrow, UINTN PosX, UINTN PosY, BOOLEAN visible) {
+    UINTN TopY = PosY - (Arrow->Height / 2);
+    if (visible) egDrawImageWithTransparency(Arrow, NULL, PosX, TopY, Arrow->Width, Arrow->Height);
+    else ClearWithBackground(PosX, TopY, Arrow->Width, Arrow->Height);
+}
+
 // Display (or erase) the arrow icons to the left and right of an icon's row,
 // as appropriate.
 static VOID PaintArrows(SCROLL_STATE *State, UINTN PosX, UINTN PosY, UINTN row0Loaders) {
-   EG_IMAGE *TempImage;
-   UINTN Width, Height, RightX, AdjPosY;
+    BOOLEAN HideFlagArrows = GlobalConfig.HideUIFlags & HIDEUI_FLAG_ARROWS;
+    if(!HideFlagArrows){
+
+        EG_IMAGE * LeftArrow = GetIcon(&egemb_arrow_left, L"arrow_left");
+        if(LeftArrow){
+            UINTN LeftX = PosX - LeftArrow->Width;
+            PaintArrow(LeftArrow, LeftX, PosY, State->FirstVisible > 0);
+            egFreeImage(LeftArrow);
+        }
 
-   // NOTE: Assume that left and right arrows are of the same size....
-   Width = egemb_arrow_left.Width;
-   Height = egemb_arrow_left.Height;
-   RightX = (UGAWidth + (TileSizes[0] + TILE_XSPACING) * State->MaxVisible) / 2 + TILE_XSPACING;
-   AdjPosY = PosY - (Height / 2);
-
-   // For PaintIcon() calls, the starting Y position is moved to the midpoint
-   // of the surrounding row; PaintIcon() adjusts this back up by half the
-   // icon's height to properly center it.
-   if ((State->FirstVisible > 0) && (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_ARROWS))) {
-      PaintIcon(&egemb_arrow_left, L"arrow_left", PosX, PosY, ALIGN_RIGHT);
-   } else {
-      TempImage = egCropImage(GlobalConfig.ScreenBackground, PosX - Width, AdjPosY, Width, Height);
-      BltImage(TempImage, PosX - Width, AdjPosY);
-      egFreeImage(TempImage);
-   } // if/else
-
-   if ((State->LastVisible < (row0Loaders - 1)) && (!(GlobalConfig.HideUIFlags & HIDEUI_FLAG_ARROWS))) {
-      PaintIcon(&egemb_arrow_right, L"arrow_right", RightX, PosY, ALIGN_LEFT);
-   } else {
-      TempImage = egCropImage(GlobalConfig.ScreenBackground, RightX, AdjPosY, Width, Height);
-      BltImage(TempImage, RightX, AdjPosY);
-      egFreeImage(TempImage);
-   } // if/else
+        EG_IMAGE * RightArrow = GetIcon(&egemb_arrow_right, L"arrow_right");
+        if(RightArrow){
+            UINTN RightX = (UGAWidth + (TileSizes[0] + TILE_XSPACING) * State->MaxVisible) / 2 + TILE_XSPACING;
+            PaintArrow(RightArrow, RightX, PosY, State->LastVisible < (row0Loaders - 1));
+            egFreeImage(RightArrow);
+        }
+
+    }
 } // VOID PaintArrows()
 
 // Display main menu in graphics mode
-VOID MainMenuStyle(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText)
+VOID MainMenuStyle(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State,
+                   IN UINTN Function, IN CHAR16 *ParamText)
 {
     INTN i;
     static UINTN row0PosX, row0PosXRunning, row1PosY, row0Loaders;
@@ -1255,9 +1274,6 @@
 
         case MENU_FUNCTION_PAINT_ALL:
             PaintAll(Screen, State, itemPosX, row0PosY, row1PosY, textPosY);
-            // For PaintArrows(), the starting Y position is moved to the midpoint
-            // of the surrounding row; PaintIcon() adjusts this back up by half the
-            // icon's height to properly center it.
             PaintArrows(State, row0PosX - TILE_XSPACING, row0PosY + (TileSizes[0] / 2), row0Loaders);
             break;
 
@@ -1283,7 +1299,6 @@
     UINTN row0Count, row1Count, row1PosX, row1PosXRunning;
     static UINTN *itemPosX;
     static UINTN row0PosY;
-<<<<<<< HEAD
     UINTN itemRow;
 
     row0Count = 0;
@@ -1291,11 +1306,11 @@
     row0Loaders = 0;
     for (i = 0; i <= State->MaxIndex; i++) {
         if (Screen->Entries[i]->Row == 1) {
-            row1Count++;
+                row1Count++;
         } else {
-            row0Loaders++;
-            if (row0Count < State->MaxVisible)
-                row0Count++;
+                row0Loaders++;
+                if (row0Count < State->MaxVisible)
+                        row0Count++;
         }
     }
     row0PosX = (UGAWidth + TILE_XSPACING - (TileSizes[0] + TILE_XSPACING) * row0Count) >> 1;
@@ -1305,20 +1320,19 @@
 
     if (PosY >= row0PosY && PosY <= row0PosY + TileSizes[0]) {
         itemRow = 0;
-        if (PosX <= row0PosX) {
-            return TOUCH_LEFT_ARROW;
-        } else if (PosX >= (UGAWidth - row0PosX)) {
-            return TOUCH_RIGHT_ARROW;
+        if(PosX <= row0PosX) {
+            return POINTER_LEFT_ARROW;
+        }
+        else if(PosX >= (UGAWidth - row0PosX)) {
+            return POINTER_RIGHT_ARROW;
         }
-
     } else if (PosY >= row1PosY && PosY <= row1PosY + TileSizes[1]) {
         itemRow = 1;
-
     } else { // Y coordinate is outside of either row
-        return TOUCH_NO_ITEM;
+        return POINTER_NO_ITEM;
     }
 
-    UINTN ItemIndex = TOUCH_NO_ITEM;
+    UINTN ItemIndex = POINTER_NO_ITEM;
 
     itemPosX = AllocatePool(sizeof(UINTN) * Screen->EntryCount);
     row0PosXRunning = row0PosX;
@@ -1340,90 +1354,24 @@
                     ItemIndex = i;
                     break;
                 }
-            } // if
+        } // if
         } else if (Screen->Entries[i]->Row == 1 && itemRow == 1) {
-            if (PosX >= itemPosX[i] && PosX <= itemPosX[i] + TileSizes[1]) {
+            if(PosX >= itemPosX[i] && PosX <= itemPosX[i] + TileSizes[1]) {
                 ItemIndex = i;
                 break;
             }
         }
     }
+
     MyFreePool(itemPosX);
-    return ItemIndex;
-=======
-	UINTN itemRow;
 
-	row0Count = 0;
-	row1Count = 0;
-	row0Loaders = 0;
-	for (i = 0; i <= State->MaxIndex; i++) {
-	   if (Screen->Entries[i]->Row == 1) {
-		  row1Count++;
-	   } else {
-		  row0Loaders++;
-		  if (row0Count < State->MaxVisible)
-			 row0Count++;
-	   }
-	}
-	row0PosX = (UGAWidth + TILE_XSPACING - (TileSizes[0] + TILE_XSPACING) * row0Count) >> 1;
-	row0PosY = ComputeRow0PosY();
-	row1PosX = (UGAWidth + TILE_XSPACING - (TileSizes[1] + TILE_XSPACING) * row1Count) >> 1;
-	row1PosY = row0PosY + TileSizes[0] + TILE_YSPACING;
-	
-	if(PosY >= row0PosY && PosY <= row0PosY + TileSizes[0]) {
-		itemRow = 0;
-		if(PosX <= row0PosX) {
-			return POINTER_LEFT_ARROW;
-		}
-		else if(PosX >= (UGAWidth - row0PosX)) {
-			return POINTER_RIGHT_ARROW;
-		}
-	} else if(PosY >= row1PosY && PosY <= row1PosY + TileSizes[1]) {
-		itemRow = 1;
-	} else { // Y coordinate is outside of either row
-		return POINTER_NO_ITEM;
-	}
-	
-	UINTN ItemIndex = POINTER_NO_ITEM;
-	
-	itemPosX = AllocatePool(sizeof(UINTN) * Screen->EntryCount);
-	row0PosXRunning = row0PosX;
-	row1PosXRunning = row1PosX;
-	for (i = 0; i <= State->MaxIndex; i++) {
-		if (Screen->Entries[i]->Row == 0) {
-			itemPosX[i] = row0PosXRunning;
-			row0PosXRunning += TileSizes[0] + TILE_XSPACING;
-		} else {
-			itemPosX[i] = row1PosXRunning;
-			row1PosXRunning += TileSizes[1] + TILE_XSPACING;
-		}
-	}
-	
-	for (i = State->FirstVisible; i <= State->MaxIndex; i++) {
-      if (Screen->Entries[i]->Row == 0 && itemRow == 0) {
-         if (i <= State->LastVisible) {
-			 if(PosX >= itemPosX[i - State->FirstVisible] && PosX <= itemPosX[i - State->FirstVisible] + TileSizes[0]) {
-				ItemIndex = i;
-				break;
-			 }
-         } // if
-      } else if (Screen->Entries[i]->Row == 1 && itemRow == 1) {
-		  if(PosX >= itemPosX[i] && PosX <= itemPosX[i] + TileSizes[1]) {
-			ItemIndex = i;
-			break;
-		  }
-      }
-   }
-	
-	MyFreePool(itemPosX);
-	
-	return ItemIndex;
->>>>>>> d63734581c19715b3dc13ab89c520def8d5c4566
+    return ItemIndex;
 } // VOID FindMainMenuItem()
 
 VOID GenerateWaitList() {
     UINTN PointerCount = pdCount();
     WaitListLength = 2 + PointerCount;
+
     WaitList = AllocatePool(sizeof(EFI_EVENT) * WaitListLength);
 
     WaitList[0] = ST->ConIn->WaitForKey;
@@ -1440,10 +1388,11 @@
     EFI_EVENT TimerEvent;
     EFI_STATUS Status;
 
-    if(Timeout == 0) {
+    LOG(3, LOG_LINE_NORMAL, L"Entering WaitForInput(), Timeout = %d", Timeout);
+    Status = refit_call5_wrapper(BS->CreateEvent, EVT_TIMER, 0, NULL, NULL, &TimerEvent);
+    if (Timeout == 0) {
         Length--;
     } else {
-        Status = refit_call5_wrapper(BS->CreateEvent, EVT_TIMER, 0, NULL, NULL, &TimerEvent);
         if(EFI_ERROR(Status)) {
             refit_call1_wrapper(BS->Stall, 100000); // Pause for 100 ms
             return INPUT_TIMER_ERROR;
@@ -1459,9 +1408,9 @@
     if(EFI_ERROR(Status)) {
         refit_call1_wrapper(BS->Stall, 100000); // Pause for 100 ms
         return INPUT_TIMER_ERROR;
-    } else if(Index == 0) {
+    } else if (Index == 0) {
         return INPUT_KEY;
-    } else if(Index < Length - 1) {
+    } else if (Index < Length - 1) {
         return INPUT_POINTER;
     }
     return INPUT_TIMEOUT;
@@ -1471,27 +1420,27 @@
 // Returns TRUE if the user exited with edited options; FALSE if the user
 // pressed Esc to terminate the edit.
 static BOOLEAN EditOptions(LOADER_ENTRY *MenuEntry) {
-   UINTN x_max, y_max;
-   CHAR16 *EditedOptions;
-   BOOLEAN retval = FALSE;
-
-   if (GlobalConfig.HideUIFlags & HIDEUI_FLAG_EDITOR) {
-      return FALSE;
-   }
-
-   refit_call4_wrapper(ST->ConOut->QueryMode, ST->ConOut, ST->ConOut->Mode->Mode, &x_max, &y_max);
-
-   if (!GlobalConfig.TextOnly)
-      SwitchToText(TRUE);
-
-   if (line_edit(MenuEntry->LoadOptions, &EditedOptions, x_max)) {
-      MyFreePool(MenuEntry->LoadOptions);
-      MenuEntry->LoadOptions = EditedOptions;
-      retval = TRUE;
-   } // if
-   if (!GlobalConfig.TextOnly)
-      SwitchToGraphics();
-   return retval;
+    UINTN x_max, y_max;
+    CHAR16 *EditedOptions;
+    BOOLEAN retval = FALSE;
+
+    if (GlobalConfig.HideUIFlags & HIDEUI_FLAG_EDITOR) {
+        return FALSE;
+    }
+
+    refit_call4_wrapper(ST->ConOut->QueryMode, ST->ConOut, ST->ConOut->Mode->Mode, &x_max, &y_max);
+
+    if (!GlobalConfig.TextOnly)
+        SwitchToText(TRUE);
+
+    if (line_edit(MenuEntry->LoadOptions, &EditedOptions, x_max)) {
+        MyFreePool(MenuEntry->LoadOptions);
+        MenuEntry->LoadOptions = EditedOptions;
+        retval = TRUE;
+    } // if
+    if (!GlobalConfig.TextOnly)
+        SwitchToGraphics();
+    return retval;
 } // VOID EditOptions()
 
 //
@@ -1505,6 +1454,7 @@
     REFIT_MENU_SCREEN   HideItemMenu = { NULL, NULL, 0, NULL, 0, NULL, 0, NULL,
                                          L"Press Enter to return to main menu", L"" };
 
+    LOG(3, LOG_LINE_NORMAL, L"Entering DisplaySimpleMessage()");
     if (!Message)
         return;
 
@@ -1515,84 +1465,124 @@
     AddMenuInfoLine(&HideItemMenu, Message);
     AddMenuEntry(&HideItemMenu, &MenuEntryReturn);
     RunGenericMenu(&HideItemMenu, Style, &DefaultEntry, &ChosenOption);
+    LOG(1, LOG_LINE_NORMAL, L"%s - %s", Title, Message);
 } // VOID DisplaySimpleMessage()
 
-static BOOLEAN DeleteTagFromVar(CHAR16 *ToDelete, CHAR16 *TagList, CHAR16 *VarName) {
-    UINTN       i = 0;
-    CHAR16      *OneElement, *NewList = NULL;
-    BOOLEAN     DeletedSomething = FALSE;
-    EFI_STATUS  Status;
-
-    if ((ToDelete == NULL) || (TagList == NULL) || (VarName == NULL))
-        return FALSE;
+// Check each filename in FilenameList to be sure it refers to a valid file. If
+// not, delete it. This works only on filenames that are complete, with volume,
+// path, and filename components; if the filename omits the volume, the search
+// is not done and the item is left intact, no matter what.
+// Returns TRUE if any files were deleted, FALSE otherwise.
+static BOOLEAN RemoveInvalidFilenames(CHAR16 *FilenameList, CHAR16 *VarName) {
+    UINTN i = 0;
+    CHAR16 *Filename, *OneElement, *VolName = NULL;
+    REFIT_VOLUME *Volume;
+    EFI_FILE_HANDLE FileHandle;
+    BOOLEAN DeleteIt = FALSE, DeletedSomething = FALSE;
+    EFI_STATUS Status;
 
-    while ((OneElement = FindCommaDelimited(TagList, i++)) != NULL) {
-        if (!MyStriCmp(OneElement, ToDelete)) {
-            MergeStrings(&NewList, OneElement, L',');
+    while ((OneElement = FindCommaDelimited(FilenameList, i)) != NULL) {
+        DeleteIt = FALSE;
+        Filename = StrDuplicate(OneElement);
+        if (SplitVolumeAndFilename(&Filename, &VolName)) {
+            DeleteIt = TRUE;
+            if (FindVolume(&Volume, VolName) && Volume->RootDir) {
+                Status = refit_call5_wrapper(Volume->RootDir->Open, Volume->RootDir, &FileHandle,
+                                             Filename, EFI_FILE_MODE_READ, 0);
+                if (Status == EFI_SUCCESS) {
+                    DeleteIt = FALSE;
+                    refit_call1_wrapper(FileHandle->Close, FileHandle);
+                } // if file exists
+            } // if volume exists
+        } // if list item includes volume
+        if (DeleteIt) {
+            DeleteItemFromCsvList(OneElement, FilenameList);
         } else {
-            DeletedSomething = TRUE;
+            i++;
         }
-    } // while
-    MyFreePool(OneElement);
-    i = StrLen(NewList);
-    if ((i > 0) && (NewList[i - 1] == L',')) {
-        NewList[i - 1] = '\0';
-        i--;
-    } // if
-    if (DeletedSomething) {
-        if (i == 0) {
-            Status = EfivarSetRaw(&RefindGuid, VarName, (CHAR8 *) NewList, 0, TRUE);
-        } else {
-            Status = EfivarSetRaw(&RefindGuid, VarName, (CHAR8 *) NewList, i * 2 + 2, TRUE);
-        } // if/else
-        CheckError(Status, L"in DeleteTagFromVar()");
-    } // if
-    MyFreePool(NewList);
+        MyFreePool(OneElement);
+        MyFreePool(Filename);
+        MyFreePool(VolName);
+        VolName = NULL;
+        DeletedSomething |= DeleteIt;
+    } // while()
     return DeletedSomething;
-} // BOOLEAN DeleteTagFromVar()
+} // BOOLEAN RemoveInvalidFilenames()
+
+// Save a list of items to be hidden to NVRAM or disk, as determined by
+// GlobalConfig.UseNvram.
+static VOID SaveHiddenList(IN CHAR16 *HiddenList, IN CHAR16 *VarName) {
+    EFI_STATUS Status;
+    UINTN i;
+
+    i = HiddenList ? StrLen(HiddenList) : 0;
+    Status = EfivarSetRaw(&RefindGuid, VarName, (CHAR8 *) HiddenList, i * 2 + 2 * (i > 0), TRUE);
+    CheckError(Status, L"in SaveHiddenList()");
+} // VOID SaveHiddenList()
 
 // Present a menu that enables the user to delete hidden tags (that is, to
 // un-hide them).
 VOID ManageHiddenTags(VOID) {
-    CHAR16              *AllTags = NULL, *HiddenTags, *HiddenTools, *HiddenLegacy, *OneElement = NULL;
+    CHAR16              *AllTags = NULL, *HiddenTags, *HiddenTools;
+    CHAR16              *HiddenLegacy, *HiddenFirmware, *OneElement = NULL;
     INTN                DefaultEntry = 0;
     MENU_STYLE_FUNC     Style = TextMenuStyle;
-    REFIT_MENU_ENTRY    *ChosenOption, *MenuEntryItem;
+    REFIT_MENU_ENTRY    *ChosenOption, *MenuEntryItem = NULL;
     REFIT_MENU_SCREEN   HideItemMenu = { L"Manage Hidden Tags Menu", NULL, 0, NULL, 0, NULL, 0, NULL,
                                          L"Select an option and press Enter or",
                                          L"press Esc to return to main menu without changes" };
     UINTN               MenuExit, i = 0;
+    BOOLEAN             SaveTags, SaveTools, SaveLegacy = FALSE, SaveFirmware = FALSE;
 
+    LOG(1, LOG_LINE_SEPARATOR, L"Managing hidden tags");
     HideItemMenu.TitleImage = BuiltinIcon(BUILTIN_ICON_FUNC_HIDDEN);
     if (AllowGraphicsMode)
         Style = GraphicsMenuStyle;
 
     HiddenTags = ReadHiddenTags(L"HiddenTags");
+    SaveTags = RemoveInvalidFilenames(HiddenTags, L"HiddenTags");
     if (HiddenTags && (HiddenTags[0] != L'\0'))
         AllTags = StrDuplicate(HiddenTags);
     HiddenTools = ReadHiddenTags(L"HiddenTools");
+    SaveTools = RemoveInvalidFilenames(HiddenTools, L"HiddenTools");
     if (HiddenTools && (HiddenTools[0] != L'\0'))
         MergeStrings(&AllTags, HiddenTools, L',');
     HiddenLegacy = ReadHiddenTags(L"HiddenLegacy");
     if (HiddenLegacy && (HiddenLegacy[0] != L'\0'))
         MergeStrings(&AllTags, HiddenLegacy, L',');
+    HiddenFirmware = ReadHiddenTags(L"HiddenFirmware");
+    if (HiddenFirmware && (HiddenFirmware[0] != L'\0'))
+        MergeStrings(&AllTags, HiddenFirmware, L',');
     if ((AllTags) && (StrLen(AllTags) > 0)) {
         AddMenuInfoLine(&HideItemMenu, L"Select a tag and press Enter to restore it");
         while ((OneElement = FindCommaDelimited(AllTags, i++)) != NULL) {
-            MenuEntryItem = AllocateZeroPool(sizeof(REFIT_MENU_ENTRY));
+            MenuEntryItem = AllocateZeroPool(sizeof(REFIT_MENU_ENTRY)); // do not free
             MenuEntryItem->Title = StrDuplicate(OneElement);
             MenuEntryItem->Tag = TAG_RETURN;
             MenuEntryItem->Row = 1;
             AddMenuEntry(&HideItemMenu, MenuEntryItem);
+            MyFreePool(OneElement);
         } // while
         MenuExit = RunGenericMenu(&HideItemMenu, Style, &DefaultEntry, &ChosenOption);
         if (MenuExit == MENU_EXIT_ENTER) {
-            if (DeleteTagFromVar(ChosenOption->Title, HiddenTags, L"HiddenTags") ||
-                DeleteTagFromVar(ChosenOption->Title, HiddenTools, L"HiddenTools") ||
-                DeleteTagFromVar(ChosenOption->Title, HiddenLegacy, L"HiddenLegacy")) {
-                    RescanAll(TRUE);
-            } // if
+            SaveTags |= DeleteItemFromCsvList(ChosenOption->Title, HiddenTags);
+            SaveTools |= DeleteItemFromCsvList(ChosenOption->Title, HiddenTools);
+            SaveFirmware |= DeleteItemFromCsvList(ChosenOption->Title, HiddenFirmware);
+            SaveLegacy |= DeleteItemFromCsvList(ChosenOption->Title, HiddenLegacy);
         } // if
+        if (SaveTags)
+            SaveHiddenList(HiddenTags, L"HiddenTags");
+        if (SaveLegacy)
+            SaveHiddenList(HiddenLegacy, L"HiddenLegacy");
+        if (SaveTools) {
+            SaveHiddenList(HiddenTools, L"HiddenTools");
+            MyFreePool(gHiddenTools);
+            gHiddenTools = NULL;
+        }
+        if (SaveFirmware)
+            SaveHiddenList(HiddenFirmware, L"HiddenFirmware");
+        if (SaveTags || SaveTools || SaveLegacy || SaveFirmware)
+            RescanAll(FALSE, FALSE);
     } else {
         DisplaySimpleMessage(L"Information", L"No hidden tags found");
     }
@@ -1600,7 +1590,7 @@
     MyFreePool(HiddenTags);
     MyFreePool(HiddenTools);
     MyFreePool(HiddenLegacy);
-    MyFreePool(OneElement);
+    MyFreePool(HiddenFirmware);
 } // VOID ManageHiddenTags()
 
 CHAR16* ReadHiddenTags(CHAR16 *VarName) {
@@ -1618,9 +1608,10 @@
     return (CHAR16 *) Buffer;
 } // CHAR16* ReadHiddenTags()
 
+// Add PathName to the hidden tags variable specified by *VarName.
 static VOID AddToHiddenTags(CHAR16 *VarName, CHAR16 *Pathname) {
-    CHAR16 *HiddenTags;
-    EFI_STATUS Status;
+    CHAR16      *HiddenTags;
+    EFI_STATUS  Status;
 
     if (Pathname && (StrLen(Pathname) > 0)) {
         HiddenTags = ReadHiddenTags(VarName);
@@ -1631,50 +1622,81 @@
     } // if
 } // VOID AddToHiddenTags()
 
+// Adds a filename, specified by the *Loader variable, to the *VarName EFI variable,
+// using the mostly-prepared *HideItemMenu structure to prompt the user to confirm
+// hiding that item.
+// Returns TRUE if item was hidden, FALSE otherwise.
 static BOOLEAN HideEfiTag(LOADER_ENTRY *Loader, REFIT_MENU_SCREEN *HideItemMenu, CHAR16 *VarName) {
-    REFIT_VOLUME       *Volume = NULL;
+    REFIT_VOLUME       *TestVolume = NULL;
     BOOLEAN            TagHidden = FALSE;
-    CHAR16             *Filename = NULL, *FullPath = NULL;
+    CHAR16             *FullPath = NULL, *GuidStr = NULL;
     MENU_STYLE_FUNC    Style = TextMenuStyle;
     UINTN              MenuExit;
     INTN               DefaultEntry = 1;
     REFIT_MENU_ENTRY   *ChosenOption;
 
+    if ((!Loader) || (!(Loader->Volume)) || (!(Loader->LoaderPath)) || (!HideItemMenu) || (!VarName))
+        return FALSE;
+
     if (AllowGraphicsMode)
         Style = GraphicsMenuStyle;
 
-    FindVolumeAndFilename(Loader->DevicePath, &Volume, &Filename);
-    if (Volume->VolName && (StrLen(Volume->VolName) > 0)) {
-        FullPath = StrDuplicate(Volume->VolName);
-    } else if (Volume->PartName && (StrLen(Volume->PartName) > 0)) {
-        FullPath = StrDuplicate(Volume->PartName);
+    if (Loader->Volume->VolName && (StrLen(Loader->Volume->VolName) > 0)) {
+        FullPath = StrDuplicate(Loader->Volume->VolName);
     }
-    MergeStrings(&FullPath, Filename, L':');
+    MergeStrings(&FullPath, Loader->LoaderPath, L':');
     AddMenuInfoLine(HideItemMenu, PoolPrint(L"Really hide %s?", FullPath));
     AddMenuEntry(HideItemMenu, &MenuEntryYes);
     AddMenuEntry(HideItemMenu, &MenuEntryNo);
     MenuExit = RunGenericMenu(HideItemMenu, Style, &DefaultEntry, &ChosenOption);
-    if (MyStriCmp(ChosenOption->Title, L"Yes") && (MenuExit == MENU_EXIT_ENTER)) {
-        MyFreePool(FullPath);
-        FullPath = NULL;
-        MergeStrings(&FullPath, GuidAsString(&Volume->PartGuid), L'\0');
-        MergeStrings(&FullPath, L":", L'\0');
-        MergeStrings(&FullPath, Filename, (Filename[0] == L'\\' ? L'\0' : L'\\'));
+
+    if (ChosenOption && MyStriCmp(ChosenOption->Title, L"Yes") && (MenuExit == MENU_EXIT_ENTER)) {
+        GuidStr = GuidAsString(&Loader->Volume->PartGuid);
+        if (FindVolume(&TestVolume, GuidStr) && TestVolume->RootDir) {
+            MyFreePool(FullPath);
+            FullPath = NULL;
+            MergeStrings(&FullPath, GuidAsString(&Loader->Volume->PartGuid), L'\0');
+            MergeStrings(&FullPath, L":", L'\0');
+            MergeStrings(&FullPath, Loader->LoaderPath, (Loader->LoaderPath[0] == L'\\' ? L'\0' : L'\\'));
+        }
         AddToHiddenTags(VarName, FullPath);
         TagHidden = TRUE;
+        MyFreePool(GuidStr);
     } // if
-    MyFreePool(Volume);
-    MyFreePool(Filename);
+
     MyFreePool(FullPath);
+
     return TagHidden;
 } // BOOLEAN HideEfiTag()
 
+static BOOLEAN HideFirmwareTag(LOADER_ENTRY *Loader, REFIT_MENU_SCREEN *HideItemMenu) {
+    MENU_STYLE_FUNC    Style = TextMenuStyle;
+    REFIT_MENU_ENTRY   *ChosenOption;
+    INTN               DefaultEntry = 1;
+    UINTN              MenuExit;
+    BOOLEAN            TagHidden = FALSE;
+
+    if (AllowGraphicsMode)
+        Style = GraphicsMenuStyle;
+
+    AddMenuInfoLine(HideItemMenu, PoolPrint(L"Really hide '%s'?", Loader->Title));
+    AddMenuEntry(HideItemMenu, &MenuEntryYes);
+    AddMenuEntry(HideItemMenu, &MenuEntryNo);
+    MenuExit = RunGenericMenu(HideItemMenu, Style, &DefaultEntry, &ChosenOption);
+    if (MyStriCmp(ChosenOption->Title, L"Yes") && (MenuExit == MENU_EXIT_ENTER)) {
+        AddToHiddenTags(L"HiddenFirmware", Loader->Title);
+        TagHidden = TRUE;
+    } // if
+    return TagHidden;
+} // BOOLEAN HideFirmwareTag()
+
 static BOOLEAN HideLegacyTag(LEGACY_ENTRY *LegacyLoader, REFIT_MENU_SCREEN *HideItemMenu) {
     MENU_STYLE_FUNC    Style = TextMenuStyle;
     REFIT_MENU_ENTRY   *ChosenOption;
     INTN               DefaultEntry = 1;
     UINTN              MenuExit;
     CHAR16             *Name = NULL;
+    BOOLEAN            TagHidden = FALSE;
 
     if (AllowGraphicsMode)
         Style = GraphicsMenuStyle;
@@ -1691,25 +1713,37 @@
     MenuExit = RunGenericMenu(HideItemMenu, Style, &DefaultEntry, &ChosenOption);
     if (MyStriCmp(ChosenOption->Title, L"Yes") && (MenuExit == MENU_EXIT_ENTER)) {
         AddToHiddenTags(L"HiddenLegacy", Name);
+        TagHidden = TRUE;
     } // if
     MyFreePool(Name);
-    return TRUE;
+    return TagHidden;
 } // BOOLEAN HideLegacyTag()
 
-static VOID HideOSTag(REFIT_MENU_ENTRY *ChosenEntry) {
+static VOID HideTag(REFIT_MENU_ENTRY *ChosenEntry) {
     LOADER_ENTRY       *Loader = (LOADER_ENTRY *) ChosenEntry;
     LEGACY_ENTRY       *LegacyLoader = (LEGACY_ENTRY *) ChosenEntry;
     REFIT_MENU_SCREEN  HideItemMenu = { NULL, NULL, 0, NULL, 0, NULL, 0, NULL,
                                         L"Select an option and press Enter or",
                                         L"press Esc to return to main menu without changes" };
 
+    if (ChosenEntry == NULL)
+        return;
+
     HideItemMenu.TitleImage = BuiltinIcon(BUILTIN_ICON_FUNC_HIDDEN);
+    // BUG: The RescanAll() calls should be conditional on successful calls to
+    // HideEfiTag() or HideLegacyTag(); but for the former, this causes
+    // crashes on a second call hide a tag if the user chose "No" to the first
+    // call. This seems to be related to memory management of Volumes; the
+    // crash occurs in FindVolumeAndFilename() and lib.c when calling
+    // DevicePathToStr(). Calling RescanAll() on all returns from HideEfiTag()
+    // seems to be an effective workaround, but there's likely a memory
+    // management bug somewhere that's the root cause.
     switch (ChosenEntry->Tag) {
         case TAG_LOADER:
             if (Loader->DiscoveryType == DISCOVERY_TYPE_AUTO) {
                 HideItemMenu.Title = L"Hide EFI OS Tag";
-                if (HideEfiTag(Loader, &HideItemMenu, L"HiddenTags"))
-                    RescanAll(TRUE);
+                HideEfiTag(Loader, &HideItemMenu, L"HiddenTags");
+                RescanAll(FALSE, FALSE);
             } else {
                 DisplaySimpleMessage(L"Cannot Hide Entry for Manual Boot Stanza",
                                      L"You must edit refind.conf to remove this entry.");
@@ -1719,7 +1753,12 @@
         case TAG_LEGACY_UEFI:
             HideItemMenu.Title = L"Hide Legacy OS Tag";
             if (HideLegacyTag(LegacyLoader, &HideItemMenu))
-                RescanAll(TRUE);
+                RescanAll(FALSE, FALSE);
+            break;
+        case TAG_FIRMWARE_LOADER:
+            HideItemMenu.Title = L"Hide Firmware Boot Option Tag";
+            if (HideFirmwareTag(Loader, &HideItemMenu))
+                RescanAll(FALSE, FALSE);
             break;
         case TAG_ABOUT:
         case TAG_REBOOT:
@@ -1727,23 +1766,27 @@
         case TAG_EXIT:
         case TAG_FIRMWARE:
         case TAG_CSR_ROTATE:
+        case TAG_INSTALL:
         case TAG_HIDDEN:
             DisplaySimpleMessage(L"Unable to Comply",
                                  L"To hide an internal tool, edit the 'showtools' line in refind.conf");
             break;
         case TAG_TOOL:
             HideItemMenu.Title = L"Hide Tool Tag";
-            if (HideEfiTag(Loader, &HideItemMenu, L"HiddenTools"))
-                RescanAll(TRUE);
+            HideEfiTag(Loader, &HideItemMenu, L"HiddenTools");
+            MyFreePool(gHiddenTools);
+            gHiddenTools = NULL;
+            RescanAll(FALSE, FALSE);
             break;
     } // switch()
-} // VOID HideOsTag()
+} // VOID HideTag()
 
 UINTN RunMenu(IN REFIT_MENU_SCREEN *Screen, OUT REFIT_MENU_ENTRY **ChosenEntry)
 {
     INTN            DefaultEntry = -1;
     MENU_STYLE_FUNC Style = TextMenuStyle;
 
+    LOG(2, LOG_LINE_NORMAL, L"Entering RunMenu()");
     if (AllowGraphicsMode)
         Style = GraphicsMenuStyle;
 
@@ -1760,6 +1803,7 @@
     INTN DefaultEntryIndex = -1;
     INTN DefaultSubmenuIndex = -1;
 
+    LOG(2, LOG_LINE_NORMAL, L"Entering RunMainMenu()");
     TileSizes[0] = (GlobalConfig.IconSizes[ICON_SIZE_BIG] * 9) / 8;
     TileSizes[1] = (GlobalConfig.IconSizes[ICON_SIZE_SMALL] * 4) / 3;
 
@@ -1776,6 +1820,8 @@
         DrawSelection = !PointerEnabled;
     }
 
+    // Generate this now and keep it around forever, since it's likely to be
+    // used after this function terminates....
     GenerateWaitList();
 
     while (!MenuExit) {
@@ -1785,7 +1831,12 @@
         MenuTitle = StrDuplicate(TempChosenEntry->Title);
         if (MenuExit == MENU_EXIT_DETAILS) {
             if (TempChosenEntry->SubScreen != NULL) {
-               MenuExit = RunGenericMenu(TempChosenEntry->SubScreen, Style, &DefaultSubmenuIndex, &TempChosenEntry);
+               LOG(3, LOG_LINE_NORMAL, L"About to call RunGenericMenu() on subscreen '%s'", MenuTitle);
+               MenuExit = RunGenericMenu(TempChosenEntry->SubScreen,
+                                         Style,
+                                         &DefaultSubmenuIndex,
+                                         &TempChosenEntry);
+               LOG(3, LOG_LINE_NORMAL, L"RunGenericMenu() has returned %d", MenuExit);
                if (MenuExit == MENU_EXIT_ESCAPE || TempChosenEntry->Tag == TAG_RETURN)
                    MenuExit = 0;
                if (MenuExit == MENU_EXIT_DETAILS) {
@@ -1796,16 +1847,13 @@
                MenuExit = 0;
             }
         } // Enter sub-screen
-        if ((MenuExit == MENU_EXIT_HIDE) && (GlobalConfig.HiddenTags)) {
-            HideOSTag(TempChosenEntry);
+        if (MenuExit == MENU_EXIT_HIDE) {
+            if (GlobalConfig.HiddenTags)
+                HideTag(TempChosenEntry);
             MenuExit = 0;
         } // Hide launcher
     }
 
-    FreePool(WaitList);
-    WaitList = NULL;
-    WaitListLength = 0;
-
     if (ChosenEntry)
         *ChosenEntry = TempChosenEntry;
     if (DefaultSelection) {
diff -Naur refind-0.13.3.1-orig/refind/menu.h refind-0.13.3.1/refind/menu.h
--- refind-0.13.3.1-orig/refind/menu.h	2022-04-10 22:28:43.000000000 +0000
+++ refind-0.13.3.1/refind/menu.h	2022-11-14 03:17:46.372022441 +0000
@@ -111,6 +111,7 @@
 
 VOID AddMenuInfoLine(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *InfoLine);
 VOID AddMenuEntry(IN REFIT_MENU_SCREEN *Screen, IN REFIT_MENU_ENTRY *Entry);
+INTN FindMenuShortcutEntry(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *Defaults);
 UINTN ComputeRow0PosY(VOID);
 VOID MainMenuStyle(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText);
 UINTN RunMenu(IN REFIT_MENU_SCREEN *Screen, OUT REFIT_MENU_ENTRY **ChosenEntry);
diff -Naur refind-0.13.3.1-orig/refind/screen.c refind-0.13.3.1/refind/screen.c
--- refind-0.13.3.1-orig/refind/screen.c	2022-04-10 22:28:43.000000000 +0000
+++ refind-0.13.3.1/refind/screen.c	2022-11-14 03:17:46.372022441 +0000
@@ -79,6 +79,7 @@
 UINTN UGAHeight;
 BOOLEAN AllowGraphicsMode;
 BOOLEAN HaveResized = FALSE;
+BOOLEAN Initialized = FALSE;
 
 EG_PIXEL StdBackgroundPixel  = { 0xbf, 0xbf, 0xbf, 0 };
 EG_PIXEL MenuBackgroundPixel = { 0xbf, 0xbf, 0xbf, 0 };
@@ -138,6 +139,8 @@
     // show the banner if in text mode
     if (GlobalConfig.TextOnly && (GlobalConfig.ScreensaverTime != -1))
        DrawScreenHeader(L"Initializing...");
+
+    Initialized = TRUE;
 }
 
 // Set the screen resolution and mode (text vs. graphics).
@@ -145,6 +148,9 @@
 {
     UINTN NewWidth, NewHeight;
 
+    if (!Initialized)
+        return;
+
     LOG(1, LOG_LINE_NORMAL, L"Setting screen resolution and mode");
     // Convert mode number to horizontal & vertical resolution values
     if ((GlobalConfig.RequestedScreenWidth > 0) && (GlobalConfig.RequestedScreenHeight == 0))
@@ -242,6 +248,9 @@
 
 VOID BeginExternalScreen(IN BOOLEAN UseGraphicsMode, IN CHAR16 *Title)
 {
+    if (!Initialized)
+        return;
+
     if (!AllowGraphicsMode)
         UseGraphicsMode = FALSE;
 
@@ -438,6 +447,9 @@
     INTN BannerPosX, BannerPosY;
     EG_PIXEL Black = { 0x0, 0x0, 0x0, 0 };
 
+    if (!Initialized)
+        return;
+
     if (ShowBanner && !(GlobalConfig.HideUIFlags & HIDEUI_FLAG_BANNER)) {
         // load banner on first call
         if (Banner == NULL) {
